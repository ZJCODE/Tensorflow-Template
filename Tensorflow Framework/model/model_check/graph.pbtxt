node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "filenames"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "../data/train/train_data"
      }
    }
  }
}
node {
  name: "compression_type"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 262144
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 12
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "buffer_size_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_768vPbACYRY"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "#"
      }
    }
  }
}
node {
  name: "StringSplit"
  op: "StringSplit"
  input: "IteratorGetNext:5"
  input: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "skip_empty"
    value {
      b: true
    }
  }
}
node {
  name: "SparseToDense/default_value"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "SparseToDense"
  op: "SparseToDense"
  input: "StringSplit"
  input: "StringSplit:2"
  input: "StringSplit:1"
  input: "SparseToDense/default_value"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "#"
      }
    }
  }
}
node {
  name: "StringSplit_1"
  op: "StringSplit"
  input: "IteratorGetNext:7"
  input: "Const_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "skip_empty"
    value {
      b: true
    }
  }
}
node {
  name: "SparseToDense_1/default_value"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "SparseToDense_1"
  op: "SparseToDense"
  input: "StringSplit_1"
  input: "StringSplit_1:2"
  input: "StringSplit_1:1"
  input: "SparseToDense_1/default_value"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "key_value_init/keys"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "f"
        string_val: "e"
        string_val: "d"
        string_val: "s"
        string_val: "a"
      }
    }
  }
}
node {
  name: "key_value_init/values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "a1"
        string_val: "a2"
        string_val: "a2"
        string_val: "a3"
        string_val: "a1"
      }
    }
  }
}
node {
  name: "hash_table"
  op: "HashTableV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "hash_table/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "-"
      }
    }
  }
}
node {
  name: "key_value_init"
  op: "InitializeTableV2"
  input: "hash_table"
  input: "key_value_init/keys"
  input: "key_value_init/values"
  device: "/device:CPU:0"
  attr {
    key: "Tkey"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tval"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "key_value_init_1/keys"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "f"
        string_val: "e"
        string_val: "d"
        string_val: "s"
        string_val: "a"
      }
    }
  }
}
node {
  name: "key_value_init_1/values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "b1"
        string_val: "b4"
        string_val: "b2"
        string_val: "b8"
        string_val: "b3"
      }
    }
  }
}
node {
  name: "hash_table_1"
  op: "HashTableV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "hash_table_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "-"
      }
    }
  }
}
node {
  name: "key_value_init_1"
  op: "InitializeTableV2"
  input: "hash_table_1"
  input: "key_value_init_1/keys"
  input: "key_value_init_1/values"
  device: "/device:CPU:0"
  attr {
    key: "Tkey"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tval"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "hash_table"
  input: "SparseToDense"
  input: "hash_table/Const"
  device: "/device:CPU:0"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "hash_table_1_Lookup"
  op: "LookupTableFindV2"
  input: "hash_table_1"
  input: "SparseToDense"
  input: "hash_table_1/Const"
  device: "/device:CPU:0"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "key_value_init_2/keys"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "f"
        string_val: "e"
        string_val: "d"
        string_val: "s"
        string_val: "a"
      }
    }
  }
}
node {
  name: "key_value_init_2/values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "a1"
        string_val: "a2"
        string_val: "a2"
        string_val: "a3"
        string_val: "a1"
      }
    }
  }
}
node {
  name: "hash_table_2"
  op: "HashTableV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "hash_table_2/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "-"
      }
    }
  }
}
node {
  name: "key_value_init_2"
  op: "InitializeTableV2"
  input: "hash_table_2"
  input: "key_value_init_2/keys"
  input: "key_value_init_2/values"
  device: "/device:CPU:0"
  attr {
    key: "Tkey"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tval"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "key_value_init_3/keys"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "f"
        string_val: "e"
        string_val: "d"
        string_val: "s"
        string_val: "a"
      }
    }
  }
}
node {
  name: "key_value_init_3/values"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "b1"
        string_val: "b4"
        string_val: "b2"
        string_val: "b8"
        string_val: "b3"
      }
    }
  }
}
node {
  name: "hash_table_3"
  op: "HashTableV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "hash_table_3/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "-"
      }
    }
  }
}
node {
  name: "key_value_init_3"
  op: "InitializeTableV2"
  input: "hash_table_3"
  input: "key_value_init_3/keys"
  input: "key_value_init_3/values"
  device: "/device:CPU:0"
  attr {
    key: "Tkey"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tval"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "hash_table_2_Lookup"
  op: "LookupTableFindV2"
  input: "hash_table_2"
  input: "IteratorGetNext:6"
  input: "hash_table_2/Const"
  device: "/device:CPU:0"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "hash_table_3_Lookup"
  op: "LookupTableFindV2"
  input: "hash_table_3"
  input: "IteratorGetNext:6"
  input: "hash_table_3/Const"
  device: "/device:CPU:0"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/col1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer/col1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "input_layer/col1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/col1/Shape"
  op: "Shape"
  input: "input_layer/col1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer/col1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer/col1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col1/strided_slice"
  op: "StridedSlice"
  input: "input_layer/col1/Shape"
  input: "input_layer/col1/strided_slice/stack"
  input: "input_layer/col1/strided_slice/stack_1"
  input: "input_layer/col1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer/col1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col1/Reshape/shape"
  op: "Pack"
  input: "input_layer/col1/strided_slice"
  input: "input_layer/col1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer/col1/Reshape"
  op: "Reshape"
  input: "input_layer/col1/ExpandDims"
  input: "input_layer/col1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/col3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer/col3/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "input_layer/col3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/col3/Shape"
  op: "Shape"
  input: "input_layer/col3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer/col3/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer/col3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col3/strided_slice"
  op: "StridedSlice"
  input: "input_layer/col3/Shape"
  input: "input_layer/col3/strided_slice/stack"
  input: "input_layer/col3/strided_slice/stack_1"
  input: "input_layer/col3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer/col3/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col3/Reshape/shape"
  op: "Pack"
  input: "input_layer/col3/strided_slice"
  input: "input_layer/col3/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer/col3/Reshape"
  op: "Reshape"
  input: "input_layer/col3/ExpandDims"
  input: "input_layer/col3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/col5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer/col5/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "input_layer/col5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/col5/Shape"
  op: "Shape"
  input: "input_layer/col5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer/col5/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer/col5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col5/strided_slice"
  op: "StridedSlice"
  input: "input_layer/col5/Shape"
  input: "input_layer/col5/strided_slice/stack"
  input: "input_layer/col5/strided_slice/stack_1"
  input: "input_layer/col5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer/col5/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/col5/Reshape/shape"
  op: "Pack"
  input: "input_layer/col5/strided_slice"
  input: "input_layer/col5/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer/col5/Reshape"
  op: "Reshape"
  input: "input_layer/col5/ExpandDims"
  input: "input_layer/col5/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer/concat"
  op: "ConcatV2"
  input: "input_layer/col1/Reshape"
  input: "input_layer/col3/Reshape"
  input: "input_layer/col5/Reshape"
  input: "input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_1/col1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_1/col1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "input_layer_1/col1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_1/col1/Shape"
  op: "Shape"
  input: "input_layer_1/col1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_1/col1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_1/col1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_1/col1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_1/col1/strided_slice"
  op: "StridedSlice"
  input: "input_layer_1/col1/Shape"
  input: "input_layer_1/col1/strided_slice/stack"
  input: "input_layer_1/col1/strided_slice/stack_1"
  input: "input_layer_1/col1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_1/col1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_1/col1/Reshape/shape"
  op: "Pack"
  input: "input_layer_1/col1/strided_slice"
  input: "input_layer_1/col1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_1/col1/Reshape"
  op: "Reshape"
  input: "input_layer_1/col1/ExpandDims"
  input: "input_layer_1/col1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_1/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_1/concat"
  op: "Identity"
  input: "input_layer_1/col1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_2/col3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_2/col3/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "input_layer_2/col3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_2/col3/Shape"
  op: "Shape"
  input: "input_layer_2/col3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_2/col3/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_2/col3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_2/col3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_2/col3/strided_slice"
  op: "StridedSlice"
  input: "input_layer_2/col3/Shape"
  input: "input_layer_2/col3/strided_slice/stack"
  input: "input_layer_2/col3/strided_slice/stack_1"
  input: "input_layer_2/col3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_2/col3/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_2/col3/Reshape/shape"
  op: "Pack"
  input: "input_layer_2/col3/strided_slice"
  input: "input_layer_2/col3/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_2/col3/Reshape"
  op: "Reshape"
  input: "input_layer_2/col3/ExpandDims"
  input: "input_layer_2/col3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_2/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_2/concat"
  op: "Identity"
  input: "input_layer_2/col3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_3/col5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_3/col5/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "input_layer_3/col5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_3/col5/Shape"
  op: "Shape"
  input: "input_layer_3/col5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_3/col5/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_3/col5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_3/col5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_3/col5/strided_slice"
  op: "StridedSlice"
  input: "input_layer_3/col5/Shape"
  input: "input_layer_3/col5/strided_slice/stack"
  input: "input_layer_3/col5/strided_slice/stack_1"
  input: "input_layer_3/col5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_3/col5/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_3/col5/Reshape/shape"
  op: "Pack"
  input: "input_layer_3/col5/strided_slice"
  input: "input_layer_3/col5/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_3/col5/Reshape"
  op: "Reshape"
  input: "input_layer_3/col5/ExpandDims"
  input: "input_layer_3/col5/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_3/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_3/concat"
  op: "Identity"
  input: "input_layer_3/col5/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "input_layer_4/col2_bucketized/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/Bucketize"
  op: "Bucketize"
  input: "input_layer_4/col2_bucketized/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "boundaries"
    value {
      list {
        f: 0.0
        f: 5.0
        f: 10.0
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/ToInt64"
  op: "Cast"
  input: "input_layer_4/col2_bucketized/Bucketize"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/one_hot"
  op: "OneHot"
  input: "input_layer_4/col2_bucketized/ToInt64"
  input: "input_layer_4/col2_bucketized/one_hot/depth"
  input: "input_layer_4/col2_bucketized/one_hot/on_value"
  input: "input_layer_4/col2_bucketized/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/Shape"
  op: "Shape"
  input: "input_layer_4/col2_bucketized/one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/strided_slice"
  op: "StridedSlice"
  input: "input_layer_4/col2_bucketized/Shape"
  input: "input_layer_4/col2_bucketized/strided_slice/stack"
  input: "input_layer_4/col2_bucketized/strided_slice/stack_1"
  input: "input_layer_4/col2_bucketized/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/Reshape/shape"
  op: "Pack"
  input: "input_layer_4/col2_bucketized/strided_slice"
  input: "input_layer_4/col2_bucketized/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_4/col2_bucketized/Reshape"
  op: "Reshape"
  input: "input_layer_4/col2_bucketized/one_hot"
  input: "input_layer_4/col2_bucketized/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_4/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_4/concat"
  op: "Identity"
  input: "input_layer_4/col2_bucketized/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "input_layer_5/col2_bucketized/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/Bucketize"
  op: "Bucketize"
  input: "input_layer_5/col2_bucketized/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "boundaries"
    value {
      list {
        f: 0.0
        f: 5.0
        f: 10.0
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/ToInt64"
  op: "Cast"
  input: "input_layer_5/col2_bucketized/Bucketize"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/one_hot"
  op: "OneHot"
  input: "input_layer_5/col2_bucketized/ToInt64"
  input: "input_layer_5/col2_bucketized/one_hot/depth"
  input: "input_layer_5/col2_bucketized/one_hot/on_value"
  input: "input_layer_5/col2_bucketized/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/Shape"
  op: "Shape"
  input: "input_layer_5/col2_bucketized/one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/strided_slice"
  op: "StridedSlice"
  input: "input_layer_5/col2_bucketized/Shape"
  input: "input_layer_5/col2_bucketized/strided_slice/stack"
  input: "input_layer_5/col2_bucketized/strided_slice/stack_1"
  input: "input_layer_5/col2_bucketized/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/Reshape/shape"
  op: "Pack"
  input: "input_layer_5/col2_bucketized/strided_slice"
  input: "input_layer_5/col2_bucketized/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_5/col2_bucketized/Reshape"
  op: "Reshape"
  input: "input_layer_5/col2_bucketized/one_hot"
  input: "input_layer_5/col2_bucketized/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_5/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_5/concat"
  op: "Identity"
  input: "input_layer_5/col2_bucketized/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "input_layer_6/col4_embedding/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "input_layer_6/col4_embedding/ExpandDims"
  input: "input_layer_6/col4_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/to_sparse_input/indices"
  op: "Where"
  input: "input_layer_6/col4_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "input_layer_6/col4_embedding/ExpandDims"
  input: "input_layer_6/col4_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "input_layer_6/col4_embedding/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_col4_4_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_col4"
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "input_layer_6/col4_embedding/col4_lookup/hash_table"
  input: "input_layer_6/col4_embedding/col4_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 4
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "input_layer_6/col4_embedding/col4_lookup/hash_table"
  input: "input_layer_6/col4_embedding/to_sparse_input/values"
  input: "input_layer_6/col4_embedding/col4_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal"
  op: "Add"
  input: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/mul"
  input: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "input_layer_6/col4_embedding/embedding_weights"
  input: "input_layer_6/col4_embedding/embedding_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/embedding_weights/read"
  op: "Identity"
  input: "input_layer_6/col4_embedding/embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice"
  op: "Slice"
  input: "input_layer_6/col4_embedding/to_sparse_input/dense_shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice/begin"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Prod"
  op: "Prod"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "input_layer_6/col4_embedding/to_sparse_input/dense_shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2/indices"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Cast/x"
  op: "Pack"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Prod"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "input_layer_6/col4_embedding/to_sparse_input/indices"
  input: "input_layer_6/col4_embedding/to_sparse_input/dense_shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "input_layer_6/col4_embedding/hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseReshape/Identity"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Where"
  op: "Where"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape"
  op: "Reshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Where"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseReshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseReshape/Identity"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Identity"
  op: "Identity"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/GatherV2_2"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Identity"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "input_layer_6/col4_embedding/embedding_weights/read"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/Unique"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Shape"
  op: "Shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice/stack"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice/stack_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/stack"
  op: "Pack"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/stack/0"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Tile"
  op: "Tile"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights"
  op: "Select"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Tile"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/zeros_like"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Cast_1"
  op: "Cast"
  input: "input_layer_6/col4_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_1"
  op: "Slice"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Cast_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_1/begin"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Shape_1"
  op: "Shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_2"
  op: "Slice"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Shape_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_2/begin"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/concat"
  op: "ConcatV2"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_1"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Slice_2"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/Shape"
  op: "Shape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/strided_slice"
  op: "StridedSlice"
  input: "input_layer_6/col4_embedding/Shape"
  input: "input_layer_6/col4_embedding/strided_slice/stack"
  input: "input_layer_6/col4_embedding/strided_slice/stack_1"
  input: "input_layer_6/col4_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/Reshape/shape"
  op: "Pack"
  input: "input_layer_6/col4_embedding/strided_slice"
  input: "input_layer_6/col4_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_6/col4_embedding/Reshape"
  op: "Reshape"
  input: "input_layer_6/col4_embedding/col4_embedding_weights/Reshape_2"
  input: "input_layer_6/col4_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_6/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_6/concat"
  op: "Identity"
  input: "input_layer_6/col4_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/ExpandDims"
  op: "ExpandDims"
  input: "hash_table_2_Lookup"
  input: "input_layer_7/col7_extend_1_embedding/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "input_layer_7/col7_extend_1_embedding/ExpandDims"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/to_sparse_input/indices"
  op: "Where"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "input_layer_7/col7_extend_1_embedding/ExpandDims"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "input_layer_7/col7_extend_1_embedding/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_extend_1_3_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_extend_1"
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 3
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/values"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal"
  op: "Add"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mul"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/embedding_weights/read"
  op: "Identity"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice"
  op: "Slice"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/dense_shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice/begin"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Prod"
  op: "Prod"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/dense_shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2/indices"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Cast/x"
  op: "Pack"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Prod"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/indices"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/dense_shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "input_layer_7/col7_extend_1_embedding/hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseReshape/Identity"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Where"
  op: "Where"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape"
  op: "Reshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Where"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseReshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseReshape/Identity"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Identity"
  op: "Identity"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/GatherV2_2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Identity"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights/read"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/Unique"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Shape"
  op: "Shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice/stack"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice/stack_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/stack"
  op: "Pack"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/stack/0"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Tile"
  op: "Tile"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights"
  op: "Select"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Tile"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/zeros_like"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Cast_1"
  op: "Cast"
  input: "input_layer_7/col7_extend_1_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_1"
  op: "Slice"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Cast_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_1/begin"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Shape_1"
  op: "Shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_2"
  op: "Slice"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Shape_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_2/begin"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/concat"
  op: "ConcatV2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_1"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Slice_2"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/Shape"
  op: "Shape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/strided_slice"
  op: "StridedSlice"
  input: "input_layer_7/col7_extend_1_embedding/Shape"
  input: "input_layer_7/col7_extend_1_embedding/strided_slice/stack"
  input: "input_layer_7/col7_extend_1_embedding/strided_slice/stack_1"
  input: "input_layer_7/col7_extend_1_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/Reshape/shape"
  op: "Pack"
  input: "input_layer_7/col7_extend_1_embedding/strided_slice"
  input: "input_layer_7/col7_extend_1_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_7/col7_extend_1_embedding/Reshape"
  op: "Reshape"
  input: "input_layer_7/col7_extend_1_embedding/col7_extend_1_embedding_weights/Reshape_2"
  input: "input_layer_7/col7_extend_1_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_7/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_7/concat"
  op: "Identity"
  input: "input_layer_7/col7_extend_1_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/ExpandDims"
  op: "ExpandDims"
  input: "hash_table_3_Lookup"
  input: "input_layer_8/col7_extend_2_embedding/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "input_layer_8/col7_extend_2_embedding/ExpandDims"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/to_sparse_input/indices"
  op: "Where"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "input_layer_8/col7_extend_2_embedding/ExpandDims"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "input_layer_8/col7_extend_2_embedding/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_extend_2_5_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_extend_2"
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 5
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/values"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal"
  op: "Add"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mul"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/embedding_weights/read"
  op: "Identity"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice"
  op: "Slice"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/dense_shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice/begin"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Prod"
  op: "Prod"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/dense_shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2/indices"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Cast/x"
  op: "Pack"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Prod"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/indices"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/dense_shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "input_layer_8/col7_extend_2_embedding/hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseReshape/Identity"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Where"
  op: "Where"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape"
  op: "Reshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Where"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseReshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseReshape/Identity"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Identity"
  op: "Identity"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/GatherV2_2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Identity"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights/read"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/Unique"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Shape"
  op: "Shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice/stack"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice/stack_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/stack"
  op: "Pack"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/stack/0"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Tile"
  op: "Tile"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights"
  op: "Select"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Tile"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/zeros_like"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Cast_1"
  op: "Cast"
  input: "input_layer_8/col7_extend_2_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_1"
  op: "Slice"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Cast_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_1/begin"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Shape_1"
  op: "Shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_2"
  op: "Slice"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Shape_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_2/begin"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/concat"
  op: "ConcatV2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_1"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Slice_2"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/Shape"
  op: "Shape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/strided_slice"
  op: "StridedSlice"
  input: "input_layer_8/col7_extend_2_embedding/Shape"
  input: "input_layer_8/col7_extend_2_embedding/strided_slice/stack"
  input: "input_layer_8/col7_extend_2_embedding/strided_slice/stack_1"
  input: "input_layer_8/col7_extend_2_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/Reshape/shape"
  op: "Pack"
  input: "input_layer_8/col7_extend_2_embedding/strided_slice"
  input: "input_layer_8/col7_extend_2_embedding/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "input_layer_8/col7_extend_2_embedding/Reshape"
  op: "Reshape"
  input: "input_layer_8/col7_extend_2_embedding/col7_extend_2_embedding_weights/Reshape_2"
  input: "input_layer_8/col7_extend_2_embedding/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "input_layer_8/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_layer_8/concat"
  op: "Identity"
  input: "input_layer_8/col7_extend_2_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "SparseToDense_1"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/to_sparse_input/indices"
  op: "Where"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "SparseToDense_1"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "SparseToDense_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_col8_9_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_col8"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "sequence_input_layer/col8_embedding/col8_lookup/hash_table"
  input: "sequence_input_layer/col8_embedding/col8_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 9
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "sequence_input_layer/col8_embedding/col8_lookup/hash_table"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/values"
  input: "sequence_input_layer/col8_embedding/col8_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/Rank"
  op: "Size"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Equal"
  op: "Equal"
  input: "sequence_input_layer/col8_embedding/Rank"
  input: "sequence_input_layer/col8_embedding/assert_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/All"
  op: "All"
  input: "sequence_input_layer/col8_embedding/assert_equal/Equal"
  input: "sequence_input_layer/col8_embedding/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col8 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col8 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer/col8_embedding/assert_equal/All"
  input: "sequence_input_layer/col8_embedding/assert_equal/Assert/Assert/data_0"
  input: "sequence_input_layer/col8_embedding/assert_equal/Assert/Assert/data_1"
  input: "sequence_input_layer/col8_embedding/Shape/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat/values_1"
  op: "Const"
  input: "^sequence_input_layer/col8_embedding/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat/axis"
  op: "Const"
  input: "^sequence_input_layer/col8_embedding/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat"
  op: "ConcatV2"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer/col8_embedding/concat/values_1"
  input: "sequence_input_layer/col8_embedding/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/indices"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer/col8_embedding/concat"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/hash_table_Lookup"
  input: "^sequence_input_layer/col8_embedding/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal"
  op: "Add"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/mul"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/read"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice"
  op: "Slice"
  input: "sequence_input_layer/col8_embedding/SparseReshape:1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice/begin"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Prod"
  op: "Prod"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "sequence_input_layer/col8_embedding/SparseReshape:1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2/indices"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Cast/x"
  op: "Pack"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Prod"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer/col8_embedding/SparseReshape"
  input: "sequence_input_layer/col8_embedding/SparseReshape:1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseReshape/Identity"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Where"
  op: "Where"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape"
  op: "Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Where"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseReshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseReshape/Identity"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Identity"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/GatherV2_2"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Identity"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "sequence_input_layer/col8_embedding/embedding_weights/read"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Unique"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Shape"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice/stack"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice/stack_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/stack"
  op: "Pack"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/stack/0"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Tile"
  op: "Tile"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights"
  op: "Select"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Tile"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/zeros_like"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Cast_1"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_1"
  op: "Slice"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Cast_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_1/begin"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Shape_1"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_2"
  op: "Slice"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Shape_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_2/begin"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/concat"
  op: "ConcatV2"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Slice_2"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/Rank_1"
  op: "Size"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/Shape_1/Cast"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Equal"
  op: "Equal"
  input: "sequence_input_layer/col8_embedding/Rank_1"
  input: "sequence_input_layer/col8_embedding/assert_equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/All"
  op: "All"
  input: "sequence_input_layer/col8_embedding/assert_equal_1/Equal"
  input: "sequence_input_layer/col8_embedding/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col8 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col8 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer/col8_embedding/assert_equal_1/All"
  input: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert/data_0"
  input: "sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert/data_1"
  input: "sequence_input_layer/col8_embedding/Shape_1/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat_1/values_1"
  op: "Const"
  input: "^sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat_1/axis"
  op: "Const"
  input: "^sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat_1"
  op: "ConcatV2"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer/col8_embedding/concat_1/values_1"
  input: "sequence_input_layer/col8_embedding/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/SparseReshape_1"
  op: "SparseReshape"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/indices"
  input: "sequence_input_layer/col8_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer/col8_embedding/concat_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/SparseReshape_1/Identity"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/hash_table_Lookup"
  input: "^sequence_input_layer/col8_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/SparseReshape_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice/stack"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice/stack_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/SparseReshape_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1/stack"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1/stack_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/ones_like/Shape"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/ones_like"
  op: "Fill"
  input: "sequence_input_layer/col8_embedding/sequence_length/ones_like/Shape"
  input: "sequence_input_layer/col8_embedding/sequence_length/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/add"
  op: "Add"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/ones_like"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/SegmentMax"
  op: "SegmentMax"
  input: "sequence_input_layer/col8_embedding/sequence_length/add"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/truediv/Cast"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/sequence_length/SegmentMax"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/truediv/Cast_1"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/sequence_length/truediv/y"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/truediv"
  op: "RealDiv"
  input: "sequence_input_layer/col8_embedding/sequence_length/truediv/Cast"
  input: "sequence_input_layer/col8_embedding/sequence_length/truediv/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/ToInt64"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/sequence_length/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer/col8_embedding/SparseReshape_1:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/sequence_length/Shape/Cast"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2/stack"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2/stack_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/Shape_1"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/sequence_length/ToInt64"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/sequence_length/Shape_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3/stack"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3/stack_1"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/sub"
  op: "Sub"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_2"
  input: "sequence_input_layer/col8_embedding/sequence_length/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/zeros"
  op: "Fill"
  input: "sequence_input_layer/col8_embedding/sequence_length/sub"
  input: "sequence_input_layer/col8_embedding/sequence_length/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/sequence_length"
  op: "ConcatV2"
  input: "sequence_input_layer/col8_embedding/sequence_length/ToInt64"
  input: "sequence_input_layer/col8_embedding/sequence_length/zeros"
  input: "sequence_input_layer/col8_embedding/sequence_length/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/Shape_2"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer/col8_embedding/Shape_2"
  input: "sequence_input_layer/col8_embedding/strided_slice/stack"
  input: "sequence_input_layer/col8_embedding/strided_slice/stack_1"
  input: "sequence_input_layer/col8_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat_2/values_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/concat_2"
  op: "ConcatV2"
  input: "sequence_input_layer/col8_embedding/strided_slice"
  input: "sequence_input_layer/col8_embedding/concat_2/values_1"
  input: "sequence_input_layer/col8_embedding/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/Reshape"
  op: "Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2"
  input: "sequence_input_layer/col8_embedding/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer/concat"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "hash_table_Lookup"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/indices"
  op: "Where"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "hash_table_Lookup"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "hash_table_Lookup"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_extend_1_3_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_extend_1"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/values"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/Rank"
  op: "Size"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Equal"
  op: "Equal"
  input: "sequence_input_layer_1/col6_extend_1_embedding/Rank"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/All"
  op: "All"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Equal"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_1 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_1 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/All"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert/data_0"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert/data_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/Shape/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat/values_1"
  op: "Const"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat/axis"
  op: "Const"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat"
  op: "ConcatV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat/values_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/indices"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/hash_table_Lookup"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal"
  op: "Add"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mul"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/read"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice"
  op: "Slice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape:1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice/begin"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Prod"
  op: "Prod"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape:1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2/indices"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Cast/x"
  op: "Pack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Prod"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape:1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseReshape/Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Where"
  op: "Where"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape"
  op: "Reshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Where"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseReshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseReshape/Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Identity"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/GatherV2_2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/read"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/Unique"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Shape"
  op: "Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/stack"
  op: "Pack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/stack/0"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Tile"
  op: "Tile"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights"
  op: "Select"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Tile"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/zeros_like"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Cast_1"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_1"
  op: "Slice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Cast_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_1/begin"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Shape_1"
  op: "Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_2"
  op: "Slice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Shape_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_2/begin"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/concat"
  op: "ConcatV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Slice_2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/Rank_1"
  op: "Size"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/Shape_1/Cast"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Equal"
  op: "Equal"
  input: "sequence_input_layer_1/col6_extend_1_embedding/Rank_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/All"
  op: "All"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Equal"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_1 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_1 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/All"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert/data_0"
  input: "sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert/data_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/Shape_1/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat_1/values_1"
  op: "Const"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat_1/axis"
  op: "Const"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat_1"
  op: "ConcatV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat_1/values_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape_1"
  op: "SparseReshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/indices"
  input: "sequence_input_layer_1/col6_extend_1_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape_1/Identity"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/hash_table_Lookup"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ones_like/Shape"
  op: "Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ones_like"
  op: "Fill"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ones_like/Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/add"
  op: "Add"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ones_like"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/SegmentMax"
  op: "SegmentMax"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/add"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv/Cast"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/SegmentMax"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv/Cast_1"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv/y"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv"
  op: "RealDiv"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv/Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ToInt64"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/SparseReshape_1:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/Shape/Cast"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/Shape_1"
  op: "Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ToInt64"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/Shape_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/sub"
  op: "Sub"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/zeros"
  op: "Fill"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/sub"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length"
  op: "ConcatV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/ToInt64"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/zeros"
  input: "sequence_input_layer_1/col6_extend_1_embedding/sequence_length/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/Shape_2"
  op: "Shape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/Shape_2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice/stack"
  input: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice/stack_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat_2/values_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/concat_2"
  op: "ConcatV2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/strided_slice"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat_2/values_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/col6_extend_1_embedding/Reshape"
  op: "Reshape"
  input: "sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_embedding_weights/Reshape_2"
  input: "sequence_input_layer_1/col6_extend_1_embedding/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_1/concat"
  op: "Identity"
  input: "sequence_input_layer_1/col6_extend_1_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "hash_table_1_Lookup"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/indices"
  op: "Where"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/values"
  op: "GatherNd"
  input: "hash_table_1_Lookup"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  op: "Shape"
  input: "hash_table_1_Lookup"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_extend_2_5_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_extend_2"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 5
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/values"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/Rank"
  op: "Size"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Equal"
  op: "Equal"
  input: "sequence_input_layer_2/col6_extend_2_embedding/Rank"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/All"
  op: "All"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Equal"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_2 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_2 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/All"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert/data_0"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert/data_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/Shape/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat/values_1"
  op: "Const"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat/axis"
  op: "Const"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat"
  op: "ConcatV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat/values_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/indices"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/hash_table_Lookup"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal"
  op: "Add"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mul"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/read"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice"
  op: "Slice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape:1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice/begin"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Prod"
  op: "Prod"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2"
  op: "GatherV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape:1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2/indices"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Cast/x"
  op: "Pack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Prod"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape:1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GreaterEqual"
  op: "GreaterEqual"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseReshape/Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Where"
  op: "Where"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape"
  op: "Reshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Where"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_1"
  op: "GatherV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseReshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_2"
  op: "GatherV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseReshape/Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Identity"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/GatherV2_2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  op: "GatherV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/read"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/Unique"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse"
  op: "SparseSegmentMean"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_1"
  op: "Reshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Shape"
  op: "Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/stack"
  op: "Pack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/stack/0"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Tile"
  op: "Tile"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/zeros_like"
  op: "ZerosLike"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights"
  op: "Select"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Tile"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/zeros_like"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Cast_1"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_1"
  op: "Slice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Cast_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_1/begin"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Shape_1"
  op: "Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_2"
  op: "Slice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Shape_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_2/begin"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/concat"
  op: "ConcatV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Slice_2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_2"
  op: "Reshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/Rank_1"
  op: "Size"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/Shape_1/Cast"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Equal"
  op: "Equal"
  input: "sequence_input_layer_2/col6_extend_2_embedding/Rank_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/All"
  op: "All"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Equal"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_2 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6_extend_2 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/All"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert/data_0"
  input: "sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert/data_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/Shape_1/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat_1/values_1"
  op: "Const"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat_1/axis"
  op: "Const"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat_1"
  op: "ConcatV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat_1/values_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape_1"
  op: "SparseReshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/indices"
  input: "sequence_input_layer_2/col6_extend_2_embedding/to_sparse_input/dense_shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape_1/Identity"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/hash_table_Lookup"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/assert_equal_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ones_like/Shape"
  op: "Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ones_like"
  op: "Fill"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ones_like/Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/add"
  op: "Add"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ones_like"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/SegmentMax"
  op: "SegmentMax"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/add"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv/Cast"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/SegmentMax"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv/Cast_1"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv/y"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv"
  op: "RealDiv"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv/Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ToInt64"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/SparseReshape_1:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/Shape/Cast"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/Shape_1"
  op: "Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ToInt64"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/Shape_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/sub"
  op: "Sub"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/zeros"
  op: "Fill"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/sub"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length"
  op: "ConcatV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/ToInt64"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/zeros"
  input: "sequence_input_layer_2/col6_extend_2_embedding/sequence_length/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/Shape_2"
  op: "Shape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/Shape_2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice/stack"
  input: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice/stack_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat_2/values_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/concat_2"
  op: "ConcatV2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/strided_slice"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat_2/values_1"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/col6_extend_2_embedding/Reshape"
  op: "Reshape"
  input: "sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_embedding_weights/Reshape_2"
  input: "sequence_input_layer_2/col6_extend_2_embedding/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_2/concat"
  op: "Identity"
  input: "sequence_input_layer_2/col6_extend_2_embedding/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "SparseToDense"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/ignore_value/x"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/to_sparse_input/indices"
  op: "Where"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/to_sparse_input/values"
  op: "GatherNd"
  input: "SparseToDense"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  op: "Shape"
  input: "SparseToDense"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_../data/vocabulary/vocabulary_col6_8_-2_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "../data/vocabulary/vocabulary_col6"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table"
  input: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: -2
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: 8
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/values"
  input: "sequence_input_layer_3/col6_indicator/col6_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Rank"
  op: "Size"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Equal"
  op: "Equal"
  input: "sequence_input_layer_3/col6_indicator/Rank"
  input: "sequence_input_layer_3/col6_indicator/assert_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/All"
  op: "All"
  input: "sequence_input_layer_3/col6_indicator/assert_equal/Equal"
  input: "sequence_input_layer_3/col6_indicator/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer_3/col6_indicator/assert_equal/All"
  input: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert/data_0"
  input: "sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert/data_1"
  input: "sequence_input_layer_3/col6_indicator/Shape/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat/values_1"
  op: "Const"
  input: "^sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat/axis"
  op: "Const"
  input: "^sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat"
  op: "ConcatV2"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  input: "sequence_input_layer_3/col6_indicator/concat/values_1"
  input: "sequence_input_layer_3/col6_indicator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/SparseReshape"
  op: "SparseReshape"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/indices"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  input: "sequence_input_layer_3/col6_indicator/concat"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/SparseReshape/Identity"
  op: "Identity"
  input: "sequence_input_layer_3/col6_indicator/hash_table_Lookup"
  input: "^sequence_input_layer_3/col6_indicator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/SparseToDense"
  op: "SparseToDense"
  input: "sequence_input_layer_3/col6_indicator/SparseReshape"
  input: "sequence_input_layer_3/col6_indicator/SparseReshape:1"
  input: "sequence_input_layer_3/col6_indicator/SparseReshape/Identity"
  input: "sequence_input_layer_3/col6_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/one_hot"
  op: "OneHot"
  input: "sequence_input_layer_3/col6_indicator/SparseToDense"
  input: "sequence_input_layer_3/col6_indicator/one_hot/depth"
  input: "sequence_input_layer_3/col6_indicator/one_hot/on_value"
  input: "sequence_input_layer_3/col6_indicator/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Sum"
  op: "Sum"
  input: "sequence_input_layer_3/col6_indicator/one_hot"
  input: "sequence_input_layer_3/col6_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Rank_1"
  op: "Size"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Shape_1/Cast"
  op: "Cast"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Equal"
  op: "Equal"
  input: "sequence_input_layer_3/col6_indicator/Rank_1"
  input: "sequence_input_layer_3/col6_indicator/assert_equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/All"
  op: "All"
  input: "sequence_input_layer_3/col6_indicator/assert_equal_1/Equal"
  input: "sequence_input_layer_3/col6_indicator/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Column col6 expected ID tensor of rank 2. "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "id_tensor shape: "
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "sequence_input_layer_3/col6_indicator/assert_equal_1/All"
  input: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert/data_0"
  input: "sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert/data_1"
  input: "sequence_input_layer_3/col6_indicator/Shape_1/Cast"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat_1/values_1"
  op: "Const"
  input: "^sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat_1/axis"
  op: "Const"
  input: "^sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat_1"
  op: "ConcatV2"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  input: "sequence_input_layer_3/col6_indicator/concat_1/values_1"
  input: "sequence_input_layer_3/col6_indicator/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/SparseReshape_1"
  op: "SparseReshape"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/indices"
  input: "sequence_input_layer_3/col6_indicator/to_sparse_input/dense_shape"
  input: "sequence_input_layer_3/col6_indicator/concat_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/SparseReshape_1/Identity"
  op: "Identity"
  input: "sequence_input_layer_3/col6_indicator/hash_table_Lookup"
  input: "^sequence_input_layer_3/col6_indicator/assert_equal_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_3/col6_indicator/SparseReshape_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice/stack"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice/stack_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1"
  op: "StridedSlice"
  input: "sequence_input_layer_3/col6_indicator/SparseReshape_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1/stack"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1/stack_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/ones_like/Shape"
  op: "Shape"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/ones_like"
  op: "Fill"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/ones_like/Shape"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/add"
  op: "Add"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/ones_like"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/SegmentMax"
  op: "SegmentMax"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/add"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/truediv/Cast"
  op: "Cast"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/SegmentMax"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/truediv/Cast_1"
  op: "Cast"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/truediv/y"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/truediv"
  op: "RealDiv"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/truediv/Cast"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/truediv/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/ToInt64"
  op: "Cast"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/Shape/Cast"
  op: "Cast"
  input: "sequence_input_layer_3/col6_indicator/SparseReshape_1:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2"
  op: "StridedSlice"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/Shape/Cast"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2/stack"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2/stack_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/Shape_1"
  op: "Shape"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/ToInt64"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3"
  op: "StridedSlice"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/Shape_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3/stack"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3/stack_1"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/sub"
  op: "Sub"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_2"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/zeros"
  op: "Fill"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/sub"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/sequence_length"
  op: "ConcatV2"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/ToInt64"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/zeros"
  input: "sequence_input_layer_3/col6_indicator/sequence_length/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Shape_2"
  op: "Shape"
  input: "sequence_input_layer_3/col6_indicator/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/strided_slice"
  op: "StridedSlice"
  input: "sequence_input_layer_3/col6_indicator/Shape_2"
  input: "sequence_input_layer_3/col6_indicator/strided_slice/stack"
  input: "sequence_input_layer_3/col6_indicator/strided_slice/stack_1"
  input: "sequence_input_layer_3/col6_indicator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat_2/values_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/concat_2"
  op: "ConcatV2"
  input: "sequence_input_layer_3/col6_indicator/strided_slice"
  input: "sequence_input_layer_3/col6_indicator/concat_2/values_1"
  input: "sequence_input_layer_3/col6_indicator/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/col6_indicator/Reshape"
  op: "Reshape"
  input: "sequence_input_layer_3/col6_indicator/Sum"
  input: "sequence_input_layer_3/col6_indicator/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "sequence_input_layer_3/concat"
  op: "Identity"
  input: "sequence_input_layer_3/col6_indicator/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "sequence_input_layer_3/concat"
  input: "Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "key_value_init_4/keys"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "f"
        string_val: "e"
        string_val: "z"
        string_val: "q"
        string_val: "d"
        string_val: "s"
        string_val: "c"
        string_val: "g"
        string_val: "b"
      }
    }
  }
}
node {
  name: "key_value_init_4/values"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 9
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\003\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\010\000\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "hash_table_4"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "hash_table_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "key_value_init_4"
  op: "InitializeTableV2"
  input: "hash_table_4"
  input: "key_value_init_4/keys"
  input: "key_value_init_4/values"
  attr {
    key: "Tkey"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tval"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
        tensor_content: "UUU@UUU@\216\3438@\000\000\200?\000\000\000@\000\000\200@\000\000\200@\000\000\200@\000\000\000@\000\000\240@\000\000@@\000\000\000@\000\000\200?\000\000\000@\000\000\200@\000\000\200@\000\000\200@\000\000\000@\000\000\240@\000\000@@\000\000\000@\000\000\200?\000\000\000@\000\000\200@\000\000\200@\000\000\200@\000\000\000@\000\000\240@\000\000\300@\000\000\200@"
      }
    }
  }
}
node {
  name: "col7_local_vec/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
        tensor_content: "UUU@UUU@\216\3438@\000\000\200?\000\000\000@\000\000\200@\000\000\200@\000\000\200@\000\000\000@\000\000\240@\000\000@@\000\000\000@\000\000\200?\000\000\000@\000\000\200@\000\000\200@\000\000\200@\000\000\000@\000\000\240@\000\000@@\000\000\000@\000\000\200?\000\000\000@\000\000\200@\000\000\200@\000\000\200@\000\000\000@\000\000\240@\000\000\300@\000\000\200@"
      }
    }
  }
}
node {
  name: "col7_local_vec"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "col7_local_vec/Assign"
  op: "Assign"
  input: "col7_local_vec"
  input: "col7_local_vec/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "col7_local_vec/read"
  op: "Identity"
  input: "col7_local_vec"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "hash_table_4_Lookup"
  op: "LookupTableFindV2"
  input: "hash_table_4"
  input: "IteratorGetNext:6"
  input: "hash_table_4/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embedding_lookup"
  op: "GatherV2"
  input: "col7_local_vec/read"
  input: "hash_table_4_Lookup"
  input: "embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "embedding_lookup/Identity"
  op: "Identity"
  input: "embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "input_layer_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "sequence_input_layer/concat"
  input: "transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/ToInt32"
  op: "Cast"
  input: "Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/sequence_length"
  op: "Identity"
  input: "rnn/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice"
  op: "StridedSlice"
  input: "rnn/Shape"
  input: "rnn/strided_slice/stack"
  input: "rnn/strided_slice/stack_1"
  input: "rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/GRUCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn/GRUCellZeroState/ExpandDims"
  input: "rnn/GRUCellZeroState/Const"
  input: "rnn/GRUCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/zeros"
  op: "Fill"
  input: "rnn/GRUCellZeroState/concat"
  input: "rnn/GRUCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/GRUCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/GRUCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/Shape_1"
  op: "Shape"
  input: "rnn/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/stack"
  op: "Pack"
  input: "rnn/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/Equal"
  op: "Equal"
  input: "rnn/Shape_1"
  input: "rnn/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/All"
  op: "All"
  input: "rnn/Equal"
  input: "rnn/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor rnn/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "rnn/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "rnn/Assert/Assert"
  op: "Assert"
  input: "rnn/All"
  input: "rnn/Assert/Assert/data_0"
  input: "rnn/stack"
  input: "rnn/Assert/Assert/data_2"
  input: "rnn/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "rnn/CheckSeqLen"
  op: "Identity"
  input: "rnn/sequence_length"
  input: "^rnn/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Shape_2"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1"
  op: "StridedSlice"
  input: "rnn/Shape_2"
  input: "rnn/strided_slice_1/stack"
  input: "rnn/strided_slice_1/stack_1"
  input: "rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Shape_3"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2"
  op: "StridedSlice"
  input: "rnn/Shape_3"
  input: "rnn/strided_slice_2/stack"
  input: "rnn/strided_slice_2/stack_1"
  input: "rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice_2"
  input: "rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat"
  op: "ConcatV2"
  input: "rnn/ExpandDims"
  input: "rnn/Const_1"
  input: "rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "rnn/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/zeros"
  op: "Fill"
  input: "rnn/concat"
  input: "rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Min"
  op: "Min"
  input: "rnn/CheckSeqLen"
  input: "rnn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Max"
  op: "Max"
  input: "rnn/CheckSeqLen"
  input: "rnn/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArray"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn/TensorArrayUnstack/Shape"
  input: "rnn/TensorArrayUnstack/strided_slice/stack"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn/TensorArrayUnstack/range/start"
  input: "rnn/TensorArrayUnstack/strided_slice"
  input: "rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn/TensorArray_1"
  input: "rnn/TensorArrayUnstack/range"
  input: "transpose"
  input: "rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/Maximum"
  op: "Maximum"
  input: "rnn/Maximum/x"
  input: "rnn/Max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/Minimum"
  op: "Minimum"
  input: "rnn/strided_slice_1"
  input: "rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/while/Enter"
  op: "Enter"
  input: "rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_1"
  op: "Enter"
  input: "rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_2"
  op: "Enter"
  input: "rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_3"
  op: "Enter"
  input: "rnn/GRUCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Merge"
  op: "Merge"
  input: "rnn/while/Enter"
  input: "rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_1"
  op: "Merge"
  input: "rnn/while/Enter_1"
  input: "rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_2"
  op: "Merge"
  input: "rnn/while/Enter_2"
  input: "rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Merge_3"
  op: "Merge"
  input: "rnn/while/Enter_3"
  input: "rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less"
  op: "Less"
  input: "rnn/while/Merge"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less/Enter"
  op: "Enter"
  input: "rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Less_1"
  op: "Less"
  input: "rnn/while/Merge_1"
  input: "rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Less_1/Enter"
  op: "Enter"
  input: "rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn/while/Less"
  input: "rnn/while/Less_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/LoopCond"
  op: "LoopCond"
  input: "rnn/while/LogicalAnd"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch"
  op: "Switch"
  input: "rnn/while/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_1"
  op: "Switch"
  input: "rnn/while/Merge_1"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_2"
  op: "Switch"
  input: "rnn/while/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Switch_3"
  op: "Switch"
  input: "rnn/while/Merge_3"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity"
  op: "Identity"
  input: "rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_1"
  op: "Identity"
  input: "rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_2"
  op: "Identity"
  input: "rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Identity_3"
  op: "Identity"
  input: "rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add"
  op: "Add"
  input: "rnn/while/Identity"
  input: "rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn/while/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "rnn/while/Identity_1"
  input: "rnn/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "rnn/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6123724579811096
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6123724579811096
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/max"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/mul"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel"
  input: "rnn/gru_cell/gates/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias"
  input: "rnn/gru_cell/gates/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7071067690849304
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/max"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/mul"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel"
  input: "rnn/gru_cell/candidate/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias"
  input: "rnn/gru_cell/candidate/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/Identity_3"
  input: "rnn/while/gru_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/MatMul"
  op: "MatMul"
  input: "rnn/while/gru_cell/concat"
  input: "rnn/while/gru_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/gru_cell/MatMul/Enter"
  op: "Enter"
  input: "rnn/gru_cell/gates/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/gru_cell/BiasAdd"
  op: "BiasAdd"
  input: "rnn/while/gru_cell/MatMul"
  input: "rnn/while/gru_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/gru_cell/BiasAdd/Enter"
  op: "Enter"
  input: "rnn/gru_cell/gates/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/gru_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/gru_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/split/split_dim"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/split"
  op: "Split"
  input: "rnn/while/gru_cell/split/split_dim"
  input: "rnn/while/gru_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "rnn/while/gru_cell/mul"
  op: "Mul"
  input: "rnn/while/gru_cell/split"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/concat_1/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/concat_1"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/gru_cell/mul"
  input: "rnn/while/gru_cell/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/MatMul_1"
  op: "MatMul"
  input: "rnn/while/gru_cell/concat_1"
  input: "rnn/while/gru_cell/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rnn/while/gru_cell/MatMul_1/Enter"
  op: "Enter"
  input: "rnn/gru_cell/candidate/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/gru_cell/BiasAdd_1"
  op: "BiasAdd"
  input: "rnn/while/gru_cell/MatMul_1"
  input: "rnn/while/gru_cell/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "rnn/while/gru_cell/BiasAdd_1/Enter"
  op: "Enter"
  input: "rnn/gru_cell/candidate/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/gru_cell/Tanh"
  op: "Tanh"
  input: "rnn/while/gru_cell/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/mul_1"
  op: "Mul"
  input: "rnn/while/gru_cell/split:1"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/sub/x"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/sub"
  op: "Sub"
  input: "rnn/while/gru_cell/sub/x"
  input: "rnn/while/gru_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/mul_2"
  op: "Mul"
  input: "rnn/while/gru_cell/sub"
  input: "rnn/while/gru_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/gru_cell/add"
  op: "Add"
  input: "rnn/while/gru_cell/mul_1"
  input: "rnn/while/gru_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Select"
  op: "Select"
  input: "rnn/while/GreaterEqual"
  input: "rnn/while/Select/Enter"
  input: "rnn/while/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Select/Enter"
  op: "Enter"
  input: "rnn/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Select_1"
  op: "Select"
  input: "rnn/while/GreaterEqual"
  input: "rnn/while/Identity_3"
  input: "rnn/while/gru_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/Select"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add_1"
  op: "Add"
  input: "rnn/while/Identity_1"
  input: "rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration"
  op: "NextIteration"
  input: "rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit"
  op: "Exit"
  input: "rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_1"
  op: "Exit"
  input: "rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_2"
  op: "Exit"
  input: "rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/while/Exit_3"
  op: "Exit"
  input: "rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range"
  op: "Range"
  input: "rnn/TensorArrayStack/range/start"
  input: "rnn/TensorArrayStack/TensorArraySizeV3"
  input: "rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn/TensorArray"
  input: "rnn/TensorArrayStack/range"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "rnn/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "transpose_1/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "transpose_1"
  op: "Transpose"
  input: "rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "rnn/while/Exit_3"
  input: "input_layer/concat"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\007\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2907009422779083
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2907009422779083
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "Assign"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dense/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "dense/kernel/Regularizer/l2_regularizer/scale"
  input: "dense/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "concat"
  input: "dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Assign"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/read"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/read"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_mean/read"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_variance/read"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization/moments/mean"
  op: "Mean"
  input: "dense/Relu"
  input: "batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "dense/Relu"
  input: "batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization/moments/variance"
  op: "Mean"
  input: "batch_normalization/moments/SquaredDifference"
  input: "batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization/moving_mean/read"
  input: "batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg/sub"
  input: "batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization/moving_variance/read"
  input: "batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization/AssignMovingAvg_1/sub"
  input: "batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add"
  op: "Add"
  input: "batch_normalization/moments/Squeeze_1"
  input: "batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "dense/Relu"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization/moments/Squeeze"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/beta/read"
  input: "batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "batch_normalization/batchnorm/mul_1"
  input: "batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dropout/dropout/Shape"
  op: "Shape"
  input: "batch_normalization/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout/dropout/random_uniform/max"
  input: "dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout/dropout/random_uniform/RandomUniform"
  input: "dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/random_uniform"
  op: "Add"
  input: "dropout/dropout/random_uniform/mul"
  input: "dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/add"
  op: "Add"
  input: "dropout/dropout/keep_prob"
  input: "dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/Floor"
  op: "Floor"
  input: "dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/div"
  op: "RealDiv"
  input: "batch_normalization/batchnorm/add_1"
  input: "dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dropout/dropout/mul"
  op: "Mul"
  input: "dropout/dropout/div"
  input: "dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.25
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_1/kernel/Initializer/random_uniform/max"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_1/kernel/Initializer/random_uniform/mul"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dense_1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "dense_1/kernel/Regularizer/l2_regularizer/scale"
  input: "dense_1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dropout/dropout/mul"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/read"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/read"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moments/mean"
  op: "Mean"
  input: "dense_1/Relu"
  input: "batch_normalization_1/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moments/StopGradient"
  op: "StopGradient"
  input: "batch_normalization_1/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "dense_1/Relu"
  input: "batch_normalization_1/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moments/variance"
  op: "Mean"
  input: "batch_normalization_1/moments/SquaredDifference"
  input: "batch_normalization_1/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moments/Squeeze"
  op: "Squeeze"
  input: "batch_normalization_1/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moments/Squeeze_1"
  op: "Squeeze"
  input: "batch_normalization_1/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_1/moving_mean/read"
  input: "batch_normalization_1/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg/sub"
  input: "batch_normalization_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_1/moving_variance/read"
  input: "batch_normalization_1/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_1/AssignMovingAvg_1/sub"
  input: "batch_normalization_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add"
  op: "Add"
  input: "batch_normalization_1/moments/Squeeze_1"
  input: "batch_normalization_1/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_1/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  input: "batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_1"
  op: "Mul"
  input: "dense_1/Relu"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_1/moments/Squeeze"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_1/beta/read"
  input: "batch_normalization_1/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/batchnorm/add_1"
  op: "Add"
  input: "batch_normalization_1/batchnorm/mul_1"
  input: "batch_normalization_1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dropout_1/dropout/Shape"
  op: "Shape"
  input: "batch_normalization_1/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_1/dropout/random_uniform/max"
  input: "dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_1/dropout/random_uniform/RandomUniform"
  input: "dropout_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/random_uniform"
  op: "Add"
  input: "dropout_1/dropout/random_uniform/mul"
  input: "dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/add"
  op: "Add"
  input: "dropout_1/dropout/keep_prob"
  input: "dropout_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/Floor"
  op: "Floor"
  input: "dropout_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/div"
  op: "RealDiv"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "dropout_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dropout_1/dropout/mul"
  op: "Mul"
  input: "dropout_1/dropout/div"
  input: "dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3535533845424652
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_2/kernel/Initializer/random_uniform/max"
  input: "dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_2/kernel/Initializer/random_uniform/mul"
  input: "dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dense_2/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "dense_2/kernel/Regularizer/l2_regularizer/scale"
  input: "dense_2/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dropout_1/dropout/mul"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Relu"
  op: "Relu"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/gamma/read"
  op: "Identity"
  input: "batch_normalization_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/beta/Assign"
  op: "Assign"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/beta/read"
  op: "Identity"
  input: "batch_normalization_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moments/mean"
  op: "Mean"
  input: "dense_2/Relu"
  input: "batch_normalization_2/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/moments/StopGradient"
  op: "StopGradient"
  input: "batch_normalization_2/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "dense_2/Relu"
  input: "batch_normalization_2/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moments/variance"
  op: "Mean"
  input: "batch_normalization_2/moments/SquaredDifference"
  input: "batch_normalization_2/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/moments/Squeeze"
  op: "Squeeze"
  input: "batch_normalization_2/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization_2/moments/Squeeze_1"
  op: "Squeeze"
  input: "batch_normalization_2/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_2/moving_mean/read"
  input: "batch_normalization_2/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg/sub"
  input: "batch_normalization_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_2/moving_variance/read"
  input: "batch_normalization_2/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_2/AssignMovingAvg_1/sub"
  input: "batch_normalization_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add"
  op: "Add"
  input: "batch_normalization_2/moments/Squeeze_1"
  input: "batch_normalization_2/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_2/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_2/batchnorm/Rsqrt"
  input: "batch_normalization_2/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul_1"
  op: "Mul"
  input: "dense_2/Relu"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_2/moments/Squeeze"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_2/beta/read"
  input: "batch_normalization_2/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/batchnorm/add_1"
  op: "Add"
  input: "batch_normalization_2/batchnorm/mul_1"
  input: "batch_normalization_2/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dropout_2/dropout/Shape"
  op: "Shape"
  input: "batch_normalization_2/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_2/dropout/random_uniform/max"
  input: "dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_2/dropout/random_uniform/RandomUniform"
  input: "dropout_2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/random_uniform"
  op: "Add"
  input: "dropout_2/dropout/random_uniform/mul"
  input: "dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/add"
  op: "Add"
  input: "dropout_2/dropout/keep_prob"
  input: "dropout_2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/Floor"
  op: "Floor"
  input: "dropout_2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/div"
  op: "RealDiv"
  input: "batch_normalization_2/batchnorm/add_1"
  input: "dropout_2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dropout_2/dropout/mul"
  op: "Mul"
  input: "dropout_2/dropout/div"
  input: "dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5940885543823242
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5940885543823242
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_3/kernel/Initializer/random_uniform/max"
  input: "dense_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_3/kernel/Initializer/random_uniform/mul"
  input: "dense_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/kernel/Assign"
  op: "Assign"
  input: "dense_3/kernel"
  input: "dense_3/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/kernel/read"
  op: "Identity"
  input: "dense_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dense_3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "dense_3/kernel/Regularizer/l2_regularizer/scale"
  input: "dense_3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/bias/Assign"
  op: "Assign"
  input: "dense_3/bias"
  input: "dense_3/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/bias/read"
  op: "Identity"
  input: "dense_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/MatMul"
  op: "MatMul"
  input: "dropout_2/dropout/mul"
  input: "dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_3/BiasAdd"
  op: "BiasAdd"
  input: "dense_3/MatMul"
  input: "dense_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_3/Relu"
  op: "Relu"
  input: "dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/read"
  op: "Identity"
  input: "batch_normalization_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/beta/Assign"
  op: "Assign"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/beta/read"
  op: "Identity"
  input: "batch_normalization_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moments/mean"
  op: "Mean"
  input: "dense_3/Relu"
  input: "batch_normalization_3/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/moments/StopGradient"
  op: "StopGradient"
  input: "batch_normalization_3/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "dense_3/Relu"
  input: "batch_normalization_3/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moments/variance"
  op: "Mean"
  input: "batch_normalization_3/moments/SquaredDifference"
  input: "batch_normalization_3/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/moments/Squeeze"
  op: "Squeeze"
  input: "batch_normalization_3/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization_3/moments/Squeeze_1"
  op: "Squeeze"
  input: "batch_normalization_3/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_3/moving_mean/read"
  input: "batch_normalization_3/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg/sub"
  input: "batch_normalization_3/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_3/moving_variance/read"
  input: "batch_normalization_3/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_normalization_3/AssignMovingAvg_1/sub"
  input: "batch_normalization_3/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_3/moving_variance"
  input: "batch_normalization_3/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/add"
  op: "Add"
  input: "batch_normalization_3/moments/Squeeze_1"
  input: "batch_normalization_3/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_normalization_3/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/mul"
  op: "Mul"
  input: "batch_normalization_3/batchnorm/Rsqrt"
  input: "batch_normalization_3/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/mul_1"
  op: "Mul"
  input: "dense_3/Relu"
  input: "batch_normalization_3/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/mul_2"
  op: "Mul"
  input: "batch_normalization_3/moments/Squeeze"
  input: "batch_normalization_3/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_3/beta/read"
  input: "batch_normalization_3/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/batchnorm/add_1"
  op: "Add"
  input: "batch_normalization_3/batchnorm/mul_1"
  input: "batch_normalization_3/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "dropout_3/dropout/Shape"
  op: "Shape"
  input: "batch_normalization_3/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout_3/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout_3/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout_3/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_3/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout_3/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout_3/dropout/random_uniform/max"
  input: "dropout_3/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout_3/dropout/random_uniform/RandomUniform"
  input: "dropout_3/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/random_uniform"
  op: "Add"
  input: "dropout_3/dropout/random_uniform/mul"
  input: "dropout_3/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/add"
  op: "Add"
  input: "dropout_3/dropout/keep_prob"
  input: "dropout_3/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/Floor"
  op: "Floor"
  input: "dropout_3/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/div"
  op: "RealDiv"
  input: "batch_normalization_3/batchnorm/add_1"
  input: "dropout_3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dropout_3/dropout/mul"
  op: "Mul"
  input: "dropout_3/dropout/div"
  input: "dropout_3/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "IteratorGetNext:8"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Rank/packed"
  op: "Pack"
  input: "dense/kernel/Regularizer/l2_regularizer"
  input: "dense_1/kernel/Regularizer/l2_regularizer"
  input: "dense_2/kernel/Regularizer/l2_regularizer"
  input: "dense_3/kernel/Regularizer/l2_regularizer"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Sum_1/input"
  op: "Pack"
  input: "dense/kernel/Regularizer/l2_regularizer"
  input: "dense_1/kernel/Regularizer/l2_regularizer"
  input: "dense_2/kernel/Regularizer/l2_regularizer"
  input: "dense_3/kernel/Regularizer/l2_regularizer"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "Sum_1/input"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dropout_3/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_3/dropout/mul"
  input: "logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/Select"
  op: "Select"
  input: "logistic_loss/GreaterEqual"
  input: "dropout_3/dropout/mul"
  input: "logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/Neg"
  op: "Neg"
  input: "dropout_3/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/Select_1"
  op: "Select"
  input: "logistic_loss/GreaterEqual"
  input: "logistic_loss/Neg"
  input: "dropout_3/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/mul"
  op: "Mul"
  input: "dropout_3/dropout/mul"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/sub"
  op: "Sub"
  input: "logistic_loss/Select"
  input: "logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/Exp"
  op: "Exp"
  input: "logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss/Log1p"
  op: "Log1p"
  input: "logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "logistic_loss"
  op: "Add"
  input: "logistic_loss/sub"
  input: "logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "logistic_loss"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "Mean"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Sigmoid"
  op: "Sigmoid"
  input: "dropout_3/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "Sigmoid"
  input: "auc/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/All"
  op: "All"
  input: "auc/assert_greater_equal/GreaterEqual"
  input: "auc/assert_greater_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (Sigmoid:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (auc/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "auc/assert_greater_equal/All"
  input: "auc/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "auc/assert_greater_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "auc/assert_greater_equal/Assert/AssertGuard/switch_t"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/assert_greater_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:x (Sigmoid:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (auc/Cast/x:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Assert/data_0"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Assert/data_1"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Assert/data_3"
  input: "auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "auc/assert_greater_equal/All"
  input: "auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/assert_greater_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Sigmoid"
  input: "auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "auc/Cast/x"
  input: "auc/assert_greater_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/Cast/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "auc/assert_greater_equal/Assert/AssertGuard/switch_f"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/assert_greater_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_greater_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "auc/assert_greater_equal/Assert/AssertGuard/control_dependency_1"
  input: "auc/assert_greater_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "Sigmoid"
  input: "auc/Cast_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/All"
  op: "All"
  input: "auc/assert_less_equal/LessEqual"
  input: "auc/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (Sigmoid:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (auc/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "auc/assert_less_equal/All"
  input: "auc/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "auc/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "auc/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "auc/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^auc/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "auc/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^auc/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^auc/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predictions must be in [0, 1]"
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^auc/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (Sigmoid:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^auc/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (auc/Cast_1/x:0) = "
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "auc/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "auc/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "auc/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "auc/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "auc/assert_less_equal/All"
  input: "auc/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "Sigmoid"
  input: "auc/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "auc/Cast_1/x"
  input: "auc/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/Cast_1/x"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "auc/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^auc/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "auc/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "auc/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:8"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/Merge"
  input: "^auc/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "Sigmoid"
  input: "^auc/assert_greater_equal/Assert/AssertGuard/Merge"
  input: "^auc/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "auc/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "auc/Reshape"
  op: "Reshape"
  input: "auc/remove_squeezable_dimensions/Squeeze"
  input: "auc/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "auc/Reshape_1"
  op: "Reshape"
  input: "auc/Cast_2"
  input: "auc/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Shape"
  op: "Shape"
  input: "auc/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "auc/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice"
  op: "StridedSlice"
  input: "auc/Shape"
  input: "auc/strided_slice/stack"
  input: "auc/strided_slice/stack_1"
  input: "auc/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "auc/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content: "\225\277\326\263\317\251\244;\317\251$<\267\376v<\317\251\244<C\324\315<\267\376\366<\225\024\020=\317\251$=\t?9=C\324M=}ib=\267\376v=\370\311\205=\225\024\220=2_\232=\317\251\244=l\364\256=\t?\271=\246\211\303=C\324\315=\340\036\330=}i\342=\032\264\354=\267\376\366=\252\244\000>\370\311\005>G\357\n>\225\024\020>\3449\025>2_\032>\201\204\037>\317\251$>\036\317)>l\364.>\273\0314>\t?9>Wd>>\246\211C>\364\256H>C\324M>\221\371R>\340\036X>.D]>}ib>\313\216g>\032\264l>h\331q>\267\376v>\005$|>\252\244\200>Q7\203>\370\311\205>\240\\\210>G\357\212>\356\201\215>\225\024\220><\247\222>\3449\225>\213\314\227>2_\232>\331\361\234>\201\204\237>(\027\242>\317\251\244>v<\247>\036\317\251>\305a\254>l\364\256>\023\207\261>\273\031\264>b\254\266>\t?\271>\260\321\273>Wd\276>\377\366\300>\246\211\303>M\034\306>\364\256\310>\234A\313>C\324\315>\352f\320>\221\371\322>9\214\325>\340\036\330>\207\261\332>.D\335>\326\326\337>}i\342>$\374\344>\313\216\347>r!\352>\032\264\354>\301F\357>h\331\361>\017l\364>\267\376\366>^\221\371>\005$\374>\254\266\376>\252\244\000?\375\355\001?Q7\003?\245\200\004?\370\311\005?L\023\007?\240\\\010?\363\245\t?G\357\n?\2328\014?\356\201\r?B\313\016?\225\024\020?\351]\021?<\247\022?\220\360\023?\3449\025?7\203\026?\213\314\027?\337\025\031?2_\032?\206\250\033?\331\361\034?-;\036?\201\204\037?\324\315 ?(\027\"?{`#?\317\251$?#\363%?v<\'?\312\205(?\036\317)?q\030+?\305a,?\030\253-?l\364.?\300=0?\023\2071?g\3202?\273\0314?\016c5?b\2546?\265\3657?\t?9?]\210:?\260\321;?\004\033=?Wd>?\253\255??\377\366@?R@B?\246\211C?\372\322D?M\034F?\241eG?\364\256H?H\370I?\234AK?\357\212L?C\324M?\227\035O?\352fP?>\260Q?\221\371R?\345BT?9\214U?\214\325V?\340\036X?3hY?\207\261Z?\333\372[?.D]?\202\215^?\326\326_?) a?}ib?\320\262c?$\374d?xEf?\313\216g?\037\330h?r!j?\306jk?\032\264l?m\375m?\301Fo?\025\220p?h\331q?\274\"s?\017lt?c\265u?\267\376v?\nHx?^\221y?\262\332z?\005$|?Ym}?\254\266~?\001\000\200?"
      }
    }
  }
}
node {
  name: "auc/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/ExpandDims"
  op: "ExpandDims"
  input: "auc/Const"
  input: "auc/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "auc/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/stack"
  op: "Pack"
  input: "auc/stack/0"
  input: "auc/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/Tile"
  op: "Tile"
  input: "auc/ExpandDims"
  input: "auc/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/transpose/Rank"
  op: "Rank"
  input: "auc/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/transpose/sub"
  op: "Sub"
  input: "auc/transpose/Rank"
  input: "auc/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "auc/transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/transpose/Range"
  op: "Range"
  input: "auc/transpose/Range/start"
  input: "auc/transpose/Rank"
  input: "auc/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/transpose/sub_1"
  op: "Sub"
  input: "auc/transpose/sub"
  input: "auc/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/transpose"
  op: "Transpose"
  input: "auc/Reshape"
  input: "auc/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Tile_1/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "auc/Tile_1"
  op: "Tile"
  input: "auc/transpose"
  input: "auc/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Greater"
  op: "Greater"
  input: "auc/Tile_1"
  input: "auc/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/LogicalNot"
  op: "LogicalNot"
  input: "auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Tile_2/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "auc/Tile_2"
  op: "Tile"
  input: "auc/Reshape_1"
  input: "auc/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/LogicalNot_1"
  op: "LogicalNot"
  input: "auc/Tile_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/true_positives/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "auc/true_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "auc/true_positives/Assign"
  op: "Assign"
  input: "auc/true_positives"
  input: "auc/true_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "auc/true_positives/read"
  op: "Identity"
  input: "auc/true_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/LogicalAnd"
  op: "LogicalAnd"
  input: "auc/Tile_2"
  input: "auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/ToFloat"
  op: "Cast"
  input: "auc/LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/Sum"
  op: "Sum"
  input: "auc/ToFloat"
  input: "auc/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/AssignAdd"
  op: "AssignAdd"
  input: "auc/true_positives"
  input: "auc/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "auc/false_negatives/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "auc/false_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "auc/false_negatives/Assign"
  op: "Assign"
  input: "auc/false_negatives"
  input: "auc/false_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "auc/false_negatives/read"
  op: "Identity"
  input: "auc/false_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/LogicalAnd_1"
  op: "LogicalAnd"
  input: "auc/Tile_2"
  input: "auc/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/ToFloat_1"
  op: "Cast"
  input: "auc/LogicalAnd_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/Sum_1"
  op: "Sum"
  input: "auc/ToFloat_1"
  input: "auc/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/AssignAdd_1"
  op: "AssignAdd"
  input: "auc/false_negatives"
  input: "auc/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "auc/true_negatives/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "auc/true_negatives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "auc/true_negatives/Assign"
  op: "Assign"
  input: "auc/true_negatives"
  input: "auc/true_negatives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "auc/true_negatives/read"
  op: "Identity"
  input: "auc/true_negatives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/LogicalAnd_2"
  op: "LogicalAnd"
  input: "auc/LogicalNot_1"
  input: "auc/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/ToFloat_2"
  op: "Cast"
  input: "auc/LogicalAnd_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/Sum_2"
  op: "Sum"
  input: "auc/ToFloat_2"
  input: "auc/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/AssignAdd_2"
  op: "AssignAdd"
  input: "auc/true_negatives"
  input: "auc/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "auc/false_positives/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "auc/false_positives"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "auc/false_positives/Assign"
  op: "Assign"
  input: "auc/false_positives"
  input: "auc/false_positives/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "auc/false_positives/read"
  op: "Identity"
  input: "auc/false_positives"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/LogicalAnd_3"
  op: "LogicalAnd"
  input: "auc/LogicalNot_1"
  input: "auc/Greater"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/ToFloat_3"
  op: "Cast"
  input: "auc/LogicalAnd_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "auc/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/Sum_3"
  op: "Sum"
  input: "auc/ToFloat_3"
  input: "auc/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/AssignAdd_3"
  op: "AssignAdd"
  input: "auc/false_positives"
  input: "auc/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "auc/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "auc/add"
  op: "Add"
  input: "auc/true_positives/read"
  input: "auc/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_1"
  op: "Add"
  input: "auc/true_positives/read"
  input: "auc/false_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "auc/add_2"
  op: "Add"
  input: "auc/add_1"
  input: "auc/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/div"
  op: "RealDiv"
  input: "auc/add"
  input: "auc/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_3"
  op: "Add"
  input: "auc/false_positives/read"
  input: "auc/true_negatives/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_4/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "auc/add_4"
  op: "Add"
  input: "auc/add_3"
  input: "auc/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/div_1"
  op: "RealDiv"
  input: "auc/false_positives/read"
  input: "auc/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "auc/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_1"
  op: "StridedSlice"
  input: "auc/div_1"
  input: "auc/strided_slice_1/stack"
  input: "auc/strided_slice_1/stack_1"
  input: "auc/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_2"
  op: "StridedSlice"
  input: "auc/div_1"
  input: "auc/strided_slice_2/stack"
  input: "auc/strided_slice_2/stack_1"
  input: "auc/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/sub"
  op: "Sub"
  input: "auc/strided_slice_1"
  input: "auc/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "auc/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_3"
  op: "StridedSlice"
  input: "auc/div"
  input: "auc/strided_slice_3/stack"
  input: "auc/strided_slice_3/stack_1"
  input: "auc/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_4"
  op: "StridedSlice"
  input: "auc/div"
  input: "auc/strided_slice_4/stack"
  input: "auc/strided_slice_4/stack_1"
  input: "auc/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/add_5"
  op: "Add"
  input: "auc/strided_slice_3"
  input: "auc/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "auc/truediv"
  op: "RealDiv"
  input: "auc/add_5"
  input: "auc/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/Mul"
  op: "Mul"
  input: "auc/sub"
  input: "auc/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/value"
  op: "Sum"
  input: "auc/Mul"
  input: "auc/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "auc/add_6/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "auc/add_6"
  op: "Add"
  input: "auc/AssignAdd"
  input: "auc/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_7"
  op: "Add"
  input: "auc/AssignAdd"
  input: "auc/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_8/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "auc/add_8"
  op: "Add"
  input: "auc/add_7"
  input: "auc/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/div_2"
  op: "RealDiv"
  input: "auc/add_6"
  input: "auc/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_9"
  op: "Add"
  input: "auc/AssignAdd_3"
  input: "auc/AssignAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/add_10/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "auc/add_10"
  op: "Add"
  input: "auc/add_9"
  input: "auc/add_10/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/div_3"
  op: "RealDiv"
  input: "auc/AssignAdd_3"
  input: "auc/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "auc/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "auc/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_5"
  op: "StridedSlice"
  input: "auc/div_3"
  input: "auc/strided_slice_5/stack"
  input: "auc/strided_slice_5/stack_1"
  input: "auc/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_6"
  op: "StridedSlice"
  input: "auc/div_3"
  input: "auc/strided_slice_6/stack"
  input: "auc/strided_slice_6/stack_1"
  input: "auc/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/sub_1"
  op: "Sub"
  input: "auc/strided_slice_5"
  input: "auc/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 199
      }
    }
  }
}
node {
  name: "auc/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_7"
  op: "StridedSlice"
  input: "auc/div_2"
  input: "auc/strided_slice_7/stack"
  input: "auc/strided_slice_7/stack_1"
  input: "auc/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "auc/strided_slice_8"
  op: "StridedSlice"
  input: "auc/div_2"
  input: "auc/strided_slice_8/stack"
  input: "auc/strided_slice_8/stack_1"
  input: "auc/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "auc/add_11"
  op: "Add"
  input: "auc/strided_slice_7"
  input: "auc/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "auc/truediv_1"
  op: "RealDiv"
  input: "auc/add_11"
  input: "auc/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/Mul_1"
  op: "Mul"
  input: "auc/sub_1"
  input: "auc/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 199
          }
        }
      }
    }
  }
}
node {
  name: "auc/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "auc/update_op"
  op: "Sum"
  input: "auc/Mul_1"
  input: "auc/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^gradients/Add/Identity"
  input: "^gradients/Add/Identity_1"
  input: "^gradients/Add/Identity_2"
  input: "^gradients/Add/Identity_3"
  input: "^gradients/Add/Identity_4"
  input: "^gradients/Add/Identity_5"
  input: "^gradients/Add/Identity_6"
  input: "^gradients/Add/Identity_7"
  input: "^rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity/RefEnter"
  op: "RefEnter"
  input: "batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_1/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_2/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_3/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_4/RefEnter"
  op: "RefEnter"
  input: "batch_normalization/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_5/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_3/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_6/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_1/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Add/Identity_7/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_2/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPushV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/Fill"
}
node {
  name: "gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "logistic_loss"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "logistic_loss"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Reshape/shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/tuple/control_dependency_1"
  input: "gradients/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_1_grad/Reshape"
  input: "gradients/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/Shape"
  op: "Shape"
  input: "logistic_loss/sub"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "logistic_loss/Log1p"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/logistic_loss_grad/Shape"
  input: "gradients/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/Sum"
  op: "Sum"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/logistic_loss_grad/Sum"
  input: "gradients/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/logistic_loss_grad/Sum_1"
  input: "gradients/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/logistic_loss_grad/Reshape"
  input: "^gradients/logistic_loss_grad/Reshape_1"
}
node {
  name: "gradients/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/logistic_loss_grad/Reshape"
  input: "^gradients/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/logistic_loss_grad/Reshape_1"
  input: "^gradients/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1/input_grad/unstack"
  op: "Unpack"
  input: "gradients/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "gradients/Sum_1/input_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/Sum_1/input_grad/unstack"
}
node {
  name: "gradients/Sum_1/input_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Sum_1/input_grad/unstack"
  input: "^gradients/Sum_1/input_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_1/input_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1/input_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Sum_1/input_grad/unstack:1"
  input: "^gradients/Sum_1/input_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_1/input_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1/input_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Sum_1/input_grad/unstack:2"
  input: "^gradients/Sum_1/input_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_1/input_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1/input_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Sum_1/input_grad/unstack:3"
  input: "^gradients/Sum_1/input_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Sum_1/input_grad/unstack"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "logistic_loss/Select"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "logistic_loss/mul"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/logistic_loss/sub_grad/Shape"
  input: "gradients/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/logistic_loss_grad/tuple/control_dependency"
  input: "gradients/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/logistic_loss/sub_grad/Sum"
  input: "gradients/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/logistic_loss_grad/tuple/control_dependency"
  input: "gradients/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/logistic_loss/sub_grad/Neg"
  input: "gradients/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/logistic_loss/sub_grad/Reshape"
  input: "^gradients/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/logistic_loss/sub_grad/Reshape"
  input: "^gradients/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/logistic_loss/sub_grad/Reshape_1"
  input: "^gradients/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "gradients/logistic_loss/Log1p_grad/add/x"
  input: "logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "gradients/logistic_loss_grad/tuple/control_dependency_1"
  input: "gradients/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency"
  input: "dense/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency"
  input: "dense/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/dense/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency_1"
  input: "dense_1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency_1"
  input: "dense_1/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency_2"
  input: "dense_2/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency_2"
  input: "dense_2/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency_3"
  input: "dense_3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/Sum_1/input_grad/tuple/control_dependency_3"
  input: "dense_3/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dropout_3/dropout/mul"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "logistic_loss/GreaterEqual"
  input: "gradients/logistic_loss/sub_grad/tuple/control_dependency"
  input: "gradients/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "logistic_loss/GreaterEqual"
  input: "gradients/logistic_loss/Select_grad/zeros_like"
  input: "gradients/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/logistic_loss/Select_grad/Select"
  input: "^gradients/logistic_loss/Select_grad/Select_1"
}
node {
  name: "gradients/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/logistic_loss/Select_grad/Select"
  input: "^gradients/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/logistic_loss/Select_grad/Select_1"
  input: "^gradients/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dropout_3/dropout/mul"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "Reshape"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/logistic_loss/mul_grad/Shape"
  input: "gradients/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "gradients/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "gradients/logistic_loss/mul_grad/Mul"
  input: "gradients/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/logistic_loss/mul_grad/Sum"
  input: "gradients/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_3/dropout/mul"
  input: "gradients/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/logistic_loss/mul_grad/Mul_1"
  input: "gradients/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/logistic_loss/mul_grad/Sum_1"
  input: "gradients/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/logistic_loss/mul_grad/Reshape"
  input: "^gradients/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "gradients/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/logistic_loss/mul_grad/Reshape"
  input: "^gradients/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/logistic_loss/mul_grad/Reshape_1"
  input: "^gradients/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "gradients/logistic_loss/Log1p_grad/mul"
  input: "logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "dense/kernel/read"
  input: "gradients/dense/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "dense_1/kernel/read"
  input: "gradients/dense_1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "dense_2/kernel/read"
  input: "gradients/dense_2/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "dense_3/kernel/read"
  input: "gradients/dense_3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "logistic_loss/Neg"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "logistic_loss/GreaterEqual"
  input: "gradients/logistic_loss/Exp_grad/mul"
  input: "gradients/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "logistic_loss/GreaterEqual"
  input: "gradients/logistic_loss/Select_1_grad/zeros_like"
  input: "gradients/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/logistic_loss/Select_1_grad/Select"
  input: "^gradients/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "gradients/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/logistic_loss/Select_1_grad/Select"
  input: "^gradients/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/logistic_loss/Select_1_grad/Select_1"
  input: "^gradients/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/logistic_loss/Select_grad/tuple/control_dependency"
  input: "gradients/logistic_loss/mul_grad/tuple/control_dependency"
  input: "gradients/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_3/dropout/div"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout_3/dropout/Floor"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_3/dropout/mul_grad/Shape"
  input: "gradients/dropout_3/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "dropout_3/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_3/dropout/mul_grad/Mul"
  input: "gradients/dropout_3/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_3/dropout/mul_grad/Sum"
  input: "gradients/dropout_3/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_3/dropout/div"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_3/dropout/mul_grad/Mul_1"
  input: "gradients/dropout_3/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_3/dropout/mul_grad/Sum_1"
  input: "gradients/dropout_3/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout_3/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_3/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_3/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_3/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_3/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_3/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout_3/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_3/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Shape"
  op: "Shape"
  input: "batch_normalization_3/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_3/dropout/div_grad/Shape"
  input: "gradients/dropout_3/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout_3/dropout/mul_grad/tuple/control_dependency"
  input: "dropout_3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_3/dropout/div_grad/RealDiv"
  input: "gradients/dropout_3/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_3/dropout/div_grad/Sum"
  input: "gradients/dropout_3/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Neg"
  op: "Neg"
  input: "batch_normalization_3/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout_3/dropout/div_grad/Neg"
  input: "dropout_3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout_3/dropout/div_grad/RealDiv_1"
  input: "dropout_3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/dropout_3/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout_3/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_3/dropout/div_grad/mul"
  input: "gradients/dropout_3/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_3/dropout/div_grad/Sum_1"
  input: "gradients/dropout_3/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout_3/dropout/div_grad/Reshape"
  input: "^gradients/dropout_3/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/dropout_3/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_3/dropout/div_grad/Reshape"
  input: "^gradients/dropout_3/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_3/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_3/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_3/dropout/div_grad/Reshape_1"
  input: "^gradients/dropout_3/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_3/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization_3/batchnorm/mul_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Shape"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_3/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Sum"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_3/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Sum_1"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_3/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Shape"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency"
  input: "batch_normalization_3/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Mul"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Sum"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_3/Relu"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization_3/batchnorm/sub_grad/Neg"
}
node {
  name: "gradients/batch_normalization_3/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization_3/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/sub_grad/Neg"
  input: "^gradients/batch_normalization_3/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization_3/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization_3/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/batch_normalization_3/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization_3/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_3/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_3/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "batch_normalization_3/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "batch_normalization_3/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization_3/batchnorm/mul_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization_3/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/mul_grad/Mul_1"
  input: "^gradients/batch_normalization_3/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "batch_normalization_3/batchnorm/Rsqrt"
  input: "gradients/batch_normalization_3/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Shape"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_3/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Sum"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_3/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Sum_1"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization_3/batchnorm/add_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization_3/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/Reshape_1"
  input: "^gradients/batch_normalization_3/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_3/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Shape"
  op: "Shape"
  input: "batch_normalization_3/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/add"
  op: "Add"
  input: "batch_normalization_3/moments/variance/reduction_indices"
  input: "gradients/batch_normalization_3/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization_3/moments/variance_grad/add"
  input: "gradients/batch_normalization_3/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/range"
  op: "Range"
  input: "gradients/batch_normalization_3/moments/variance_grad/range/start"
  input: "gradients/batch_normalization_3/moments/variance_grad/Size"
  input: "gradients/batch_normalization_3/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization_3/moments/variance_grad/Shape_1"
  input: "gradients/batch_normalization_3/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization_3/moments/variance_grad/range"
  input: "gradients/batch_normalization_3/moments/variance_grad/mod"
  input: "gradients/batch_normalization_3/moments/variance_grad/Shape"
  input: "gradients/batch_normalization_3/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization_3/moments/variance_grad/DynamicStitch"
  input: "gradients/batch_normalization_3/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization_3/moments/variance_grad/Shape"
  input: "gradients/batch_normalization_3/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/moments/Squeeze_1_grad/Reshape"
  input: "gradients/batch_normalization_3/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization_3/moments/variance_grad/Reshape"
  input: "gradients/batch_normalization_3/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "batch_normalization_3/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization_3/moments/variance_grad/Shape_2"
  input: "gradients/batch_normalization_3/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization_3/moments/variance_grad/Shape_3"
  input: "gradients/batch_normalization_3/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization_3/moments/variance_grad/Prod_1"
  input: "gradients/batch_normalization_3/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization_3/moments/variance_grad/Prod"
  input: "gradients/batch_normalization_3/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization_3/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization_3/moments/variance_grad/Tile"
  input: "gradients/batch_normalization_3/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dense_3/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Shape"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/moments/variance_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/scalar"
  input: "gradients/batch_normalization_3/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dense_3/Relu"
  input: "batch_normalization_3/moments/StopGradient"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/mul"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Sum"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_3/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization_3/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/batch_normalization_3/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization_3/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Shape"
  op: "Shape"
  input: "dense_3/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/add"
  op: "Add"
  input: "batch_normalization_3/moments/mean/reduction_indices"
  input: "gradients/batch_normalization_3/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization_3/moments/mean_grad/add"
  input: "gradients/batch_normalization_3/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/range"
  op: "Range"
  input: "gradients/batch_normalization_3/moments/mean_grad/range/start"
  input: "gradients/batch_normalization_3/moments/mean_grad/Size"
  input: "gradients/batch_normalization_3/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization_3/moments/mean_grad/Shape_1"
  input: "gradients/batch_normalization_3/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization_3/moments/mean_grad/range"
  input: "gradients/batch_normalization_3/moments/mean_grad/mod"
  input: "gradients/batch_normalization_3/moments/mean_grad/Shape"
  input: "gradients/batch_normalization_3/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization_3/moments/mean_grad/DynamicStitch"
  input: "gradients/batch_normalization_3/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization_3/moments/mean_grad/Shape"
  input: "gradients/batch_normalization_3/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_3/moments/Squeeze_grad/Reshape"
  input: "gradients/batch_normalization_3/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization_3/moments/mean_grad/Reshape"
  input: "gradients/batch_normalization_3/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "dense_3/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization_3/moments/mean_grad/Shape_2"
  input: "gradients/batch_normalization_3/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization_3/moments/mean_grad/Shape_3"
  input: "gradients/batch_normalization_3/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization_3/moments/mean_grad/Prod_1"
  input: "gradients/batch_normalization_3/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization_3/moments/mean_grad/Prod"
  input: "gradients/batch_normalization_3/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization_3/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_3/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization_3/moments/mean_grad/Tile"
  input: "gradients/batch_normalization_3/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/batch_normalization_3/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_3/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_3/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_3/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_2"
  input: "dense_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/dense_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense_3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_3/Relu_grad/ReluGrad"
}
node {
  name: "gradients/dense_3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_3/Relu_grad/ReluGrad"
  input: "^gradients/dense_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense_3/BiasAdd_grad/tuple/control_dependency"
  input: "dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense_3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_2/dropout/mul"
  input: "gradients/dense_3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense_3/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_3/MatMul_grad/MatMul"
  input: "^gradients/dense_3/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense_3/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_3/MatMul_grad/MatMul"
  input: "^gradients/dense_3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_3/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_3/MatMul_grad/MatMul_1"
  input: "^gradients/dense_3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_2/dropout/div"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout_2/dropout/Floor"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_2/dropout/mul_grad/Shape"
  input: "gradients/dropout_2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/dense_3/MatMul_grad/tuple/control_dependency"
  input: "dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_2/dropout/mul_grad/Mul"
  input: "gradients/dropout_2/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/mul_grad/Sum"
  input: "gradients/dropout_2/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_2/dropout/div"
  input: "gradients/dense_3/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_2/dropout/mul_grad/Mul_1"
  input: "gradients/dropout_2/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/mul_grad/Sum_1"
  input: "gradients/dropout_2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout_2/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_2/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_2/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_2/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout_2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/dense_3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/dense_3/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Shape"
  op: "Shape"
  input: "batch_normalization_2/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_2/dropout/div_grad/Shape"
  input: "gradients/dropout_2/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency"
  input: "dropout_2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_2/dropout/div_grad/RealDiv"
  input: "gradients/dropout_2/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/div_grad/Sum"
  input: "gradients/dropout_2/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Neg"
  op: "Neg"
  input: "batch_normalization_2/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout_2/dropout/div_grad/Neg"
  input: "dropout_2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout_2/dropout/div_grad/RealDiv_1"
  input: "dropout_2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/dropout_2/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout_2/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_2/dropout/div_grad/mul"
  input: "gradients/dropout_2/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_2/dropout/div_grad/Sum_1"
  input: "gradients/dropout_2/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout_2/dropout/div_grad/Reshape"
  input: "^gradients/dropout_2/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/dropout_2/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_2/dropout/div_grad/Reshape"
  input: "^gradients/dropout_2/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_2/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_2/dropout/div_grad/Reshape_1"
  input: "^gradients/dropout_2/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_2/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization_2/batchnorm/mul_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Shape"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_2/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Sum"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_2/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Sum_1"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_2/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Mul"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Sum"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_2/Relu"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization_2/batchnorm/sub_grad/Neg"
}
node {
  name: "gradients/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/sub_grad/Neg"
  input: "^gradients/batch_normalization_2/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization_2/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization_2/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_2/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_2/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_4"
  input: "batch_normalization_2/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_4"
  input: "batch_normalization_2/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization_2/batchnorm/mul_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/mul_grad/Mul_1"
  input: "^gradients/batch_normalization_2/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "batch_normalization_2/batchnorm/Rsqrt"
  input: "gradients/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Shape"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_2/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Sum"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_2/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Sum_1"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization_2/batchnorm/add_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization_2/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/Reshape_1"
  input: "^gradients/batch_normalization_2/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_2/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Shape"
  op: "Shape"
  input: "batch_normalization_2/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/add"
  op: "Add"
  input: "batch_normalization_2/moments/variance/reduction_indices"
  input: "gradients/batch_normalization_2/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization_2/moments/variance_grad/add"
  input: "gradients/batch_normalization_2/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/range"
  op: "Range"
  input: "gradients/batch_normalization_2/moments/variance_grad/range/start"
  input: "gradients/batch_normalization_2/moments/variance_grad/Size"
  input: "gradients/batch_normalization_2/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization_2/moments/variance_grad/Shape_1"
  input: "gradients/batch_normalization_2/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization_2/moments/variance_grad/range"
  input: "gradients/batch_normalization_2/moments/variance_grad/mod"
  input: "gradients/batch_normalization_2/moments/variance_grad/Shape"
  input: "gradients/batch_normalization_2/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization_2/moments/variance_grad/DynamicStitch"
  input: "gradients/batch_normalization_2/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization_2/moments/variance_grad/Shape"
  input: "gradients/batch_normalization_2/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/moments/Squeeze_1_grad/Reshape"
  input: "gradients/batch_normalization_2/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization_2/moments/variance_grad/Reshape"
  input: "gradients/batch_normalization_2/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "batch_normalization_2/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization_2/moments/variance_grad/Shape_2"
  input: "gradients/batch_normalization_2/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization_2/moments/variance_grad/Shape_3"
  input: "gradients/batch_normalization_2/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization_2/moments/variance_grad/Prod_1"
  input: "gradients/batch_normalization_2/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization_2/moments/variance_grad/Prod"
  input: "gradients/batch_normalization_2/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization_2/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization_2/moments/variance_grad/Tile"
  input: "gradients/batch_normalization_2/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dense_2/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Shape"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/moments/variance_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/scalar"
  input: "gradients/batch_normalization_2/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dense_2/Relu"
  input: "batch_normalization_2/moments/StopGradient"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/mul"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Sum"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_2/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization_2/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/batch_normalization_2/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization_2/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Shape"
  op: "Shape"
  input: "dense_2/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/add"
  op: "Add"
  input: "batch_normalization_2/moments/mean/reduction_indices"
  input: "gradients/batch_normalization_2/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization_2/moments/mean_grad/add"
  input: "gradients/batch_normalization_2/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/range"
  op: "Range"
  input: "gradients/batch_normalization_2/moments/mean_grad/range/start"
  input: "gradients/batch_normalization_2/moments/mean_grad/Size"
  input: "gradients/batch_normalization_2/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization_2/moments/mean_grad/Shape_1"
  input: "gradients/batch_normalization_2/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization_2/moments/mean_grad/range"
  input: "gradients/batch_normalization_2/moments/mean_grad/mod"
  input: "gradients/batch_normalization_2/moments/mean_grad/Shape"
  input: "gradients/batch_normalization_2/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization_2/moments/mean_grad/DynamicStitch"
  input: "gradients/batch_normalization_2/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization_2/moments/mean_grad/Shape"
  input: "gradients/batch_normalization_2/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_2/moments/Squeeze_grad/Reshape"
  input: "gradients/batch_normalization_2/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization_2/moments/mean_grad/Reshape"
  input: "gradients/batch_normalization_2/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "dense_2/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization_2/moments/mean_grad/Shape_2"
  input: "gradients/batch_normalization_2/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization_2/moments/mean_grad/Shape_3"
  input: "gradients/batch_normalization_2/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization_2/moments/mean_grad/Prod_1"
  input: "gradients/batch_normalization_2/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization_2/moments/mean_grad/Prod"
  input: "gradients/batch_normalization_2/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization_2/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_2/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization_2/moments/mean_grad/Tile"
  input: "gradients/batch_normalization_2/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/batch_normalization_2/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_2/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_2/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_2/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_5"
  input: "dense_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/dense_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_2/Relu_grad/ReluGrad"
}
node {
  name: "gradients/dense_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_2/Relu_grad/ReluGrad"
  input: "^gradients/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense_2/BiasAdd_grad/tuple/control_dependency"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_1/dropout/mul"
  input: "gradients/dense_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_2/MatMul_grad/MatMul"
  input: "^gradients/dense_2/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_2/MatMul_grad/MatMul"
  input: "^gradients/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_2/MatMul_grad/MatMul_1"
  input: "^gradients/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout_1/dropout/div"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout_1/dropout/Floor"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/mul_grad/Shape"
  input: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/dense_2/MatMul_grad/tuple/control_dependency"
  input: "dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Mul"
  input: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_grad/Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/dropout/div"
  input: "gradients/dense_2/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/mul_grad/Mul_1"
  input: "gradients/dropout_1/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/mul_grad/Sum_1"
  input: "gradients/dropout_1/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout_1/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout_1/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/dense_2/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/dense_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_2/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Shape"
  op: "Shape"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/div_grad/Shape"
  input: "gradients/dropout_1/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "dropout_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/div_grad/RealDiv"
  input: "gradients/dropout_1/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/div_grad/Sum"
  input: "gradients/dropout_1/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Neg"
  op: "Neg"
  input: "batch_normalization_1/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout_1/dropout/div_grad/Neg"
  input: "dropout_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout_1/dropout/div_grad/RealDiv_1"
  input: "dropout_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/dropout_1/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout_1/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/div_grad/mul"
  input: "gradients/dropout_1/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/div_grad/Sum_1"
  input: "gradients/dropout_1/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout_1/dropout/div_grad/Reshape"
  input: "^gradients/dropout_1/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/dropout_1/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/div_grad/Reshape"
  input: "^gradients/dropout_1/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout_1/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/div_grad/Reshape_1"
  input: "^gradients/dropout_1/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization_1/batchnorm/mul_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Shape"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Sum"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout_1/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Sum_1"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense_1/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Mul"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Sum"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense_1/Relu"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization_1/batchnorm/sub_grad/Neg"
}
node {
  name: "gradients/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization_1/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/sub_grad/Neg"
  input: "^gradients/batch_normalization_1/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization_1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization_1/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_1/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization_1/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_7"
  input: "batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_7"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization_1/batchnorm/mul_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization_1/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/mul_grad/Mul_1"
  input: "^gradients/batch_normalization_1/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "batch_normalization_1/batchnorm/Rsqrt"
  input: "gradients/batch_normalization_1/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Shape"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_1/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Sum"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_1/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Sum_1"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization_1/batchnorm/add_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization_1/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/Reshape_1"
  input: "^gradients/batch_normalization_1/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_1/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Shape"
  op: "Shape"
  input: "batch_normalization_1/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/add"
  op: "Add"
  input: "batch_normalization_1/moments/variance/reduction_indices"
  input: "gradients/batch_normalization_1/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization_1/moments/variance_grad/add"
  input: "gradients/batch_normalization_1/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/range"
  op: "Range"
  input: "gradients/batch_normalization_1/moments/variance_grad/range/start"
  input: "gradients/batch_normalization_1/moments/variance_grad/Size"
  input: "gradients/batch_normalization_1/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization_1/moments/variance_grad/Shape_1"
  input: "gradients/batch_normalization_1/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization_1/moments/variance_grad/range"
  input: "gradients/batch_normalization_1/moments/variance_grad/mod"
  input: "gradients/batch_normalization_1/moments/variance_grad/Shape"
  input: "gradients/batch_normalization_1/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization_1/moments/variance_grad/DynamicStitch"
  input: "gradients/batch_normalization_1/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization_1/moments/variance_grad/Shape"
  input: "gradients/batch_normalization_1/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/moments/Squeeze_1_grad/Reshape"
  input: "gradients/batch_normalization_1/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization_1/moments/variance_grad/Reshape"
  input: "gradients/batch_normalization_1/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "batch_normalization_1/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization_1/moments/variance_grad/Shape_2"
  input: "gradients/batch_normalization_1/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization_1/moments/variance_grad/Shape_3"
  input: "gradients/batch_normalization_1/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization_1/moments/variance_grad/Prod_1"
  input: "gradients/batch_normalization_1/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization_1/moments/variance_grad/Prod"
  input: "gradients/batch_normalization_1/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization_1/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization_1/moments/variance_grad/Tile"
  input: "gradients/batch_normalization_1/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dense_1/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Shape"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/moments/variance_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/scalar"
  input: "gradients/batch_normalization_1/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dense_1/Relu"
  input: "batch_normalization_1/moments/StopGradient"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/mul"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Sum"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization_1/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization_1/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/batch_normalization_1/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization_1/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Shape"
  op: "Shape"
  input: "dense_1/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/add"
  op: "Add"
  input: "batch_normalization_1/moments/mean/reduction_indices"
  input: "gradients/batch_normalization_1/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization_1/moments/mean_grad/add"
  input: "gradients/batch_normalization_1/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/range"
  op: "Range"
  input: "gradients/batch_normalization_1/moments/mean_grad/range/start"
  input: "gradients/batch_normalization_1/moments/mean_grad/Size"
  input: "gradients/batch_normalization_1/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization_1/moments/mean_grad/Shape_1"
  input: "gradients/batch_normalization_1/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization_1/moments/mean_grad/range"
  input: "gradients/batch_normalization_1/moments/mean_grad/mod"
  input: "gradients/batch_normalization_1/moments/mean_grad/Shape"
  input: "gradients/batch_normalization_1/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization_1/moments/mean_grad/DynamicStitch"
  input: "gradients/batch_normalization_1/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization_1/moments/mean_grad/Shape"
  input: "gradients/batch_normalization_1/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization_1/moments/Squeeze_grad/Reshape"
  input: "gradients/batch_normalization_1/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization_1/moments/mean_grad/Reshape"
  input: "gradients/batch_normalization_1/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "dense_1/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization_1/moments/mean_grad/Shape_2"
  input: "gradients/batch_normalization_1/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization_1/moments/mean_grad/Shape_3"
  input: "gradients/batch_normalization_1/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization_1/moments/mean_grad/Prod_1"
  input: "gradients/batch_normalization_1/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization_1/moments/mean_grad/Prod"
  input: "gradients/batch_normalization_1/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization_1/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization_1/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization_1/moments/mean_grad/Tile"
  input: "gradients/batch_normalization_1/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/batch_normalization_1/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_1/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/batch_normalization_1/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization_1/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_8"
  input: "dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_1/Relu_grad/ReluGrad"
  input: "^gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout/dropout/mul"
  input: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense_1/MatMul_grad/MatMul"
  input: "^gradients/dense_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense_1/MatMul_grad/MatMul"
  input: "^gradients/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense_1/MatMul_grad/MatMul_1"
  input: "^gradients/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout/dropout/div"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout/dropout/Floor"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout/dropout/mul_grad/Shape"
  input: "gradients/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/dense_1/MatMul_grad/tuple/control_dependency"
  input: "dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout/dropout/mul_grad/Mul"
  input: "gradients/dropout/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout/dropout/mul_grad/Sum"
  input: "gradients/dropout/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "dropout/dropout/div"
  input: "gradients/dense_1/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout/dropout/mul_grad/Mul_1"
  input: "gradients/dropout/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout/dropout/mul_grad/Sum_1"
  input: "gradients/dropout/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout/dropout/mul_grad/Reshape"
  input: "^gradients/dropout/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/dropout/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout/dropout/mul_grad/Reshape"
  input: "^gradients/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout/dropout/mul_grad/Reshape_1"
  input: "^gradients/dropout/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/dense_1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense_1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Shape"
  op: "Shape"
  input: "batch_normalization/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout/dropout/div_grad/Shape"
  input: "gradients/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/dropout/dropout/div_grad/RealDiv"
  input: "gradients/dropout/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout/dropout/div_grad/Sum"
  input: "gradients/dropout/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Neg"
  op: "Neg"
  input: "batch_normalization/batchnorm/add_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/dropout/dropout/div_grad/Neg"
  input: "dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/dropout/dropout/div_grad/RealDiv_1"
  input: "dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/dropout/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/dropout/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout/dropout/div_grad/mul"
  input: "gradients/dropout/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/dropout/dropout/div_grad/Sum_1"
  input: "gradients/dropout/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dropout/dropout/div_grad/Reshape"
  input: "^gradients/dropout/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/dropout/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout/dropout/div_grad/Reshape"
  input: "^gradients/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dropout/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout/dropout/div_grad/Reshape_1"
  input: "^gradients/dropout/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "batch_normalization/batchnorm/mul_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/dropout/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/dropout/dropout/div_grad/tuple/control_dependency"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Sum_1"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "dense/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "dense/Relu"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization/batchnorm/sub_grad/Neg"
}
node {
  name: "gradients/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^gradients/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/batch_normalization/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "batch_normalization/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization/batchnorm/mul_grad/Mul_1"
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^gradients/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "batch_normalization/batchnorm/Rsqrt"
  input: "gradients/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization/batchnorm/add_grad/Shape"
  input: "gradients/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/add_grad/Sum"
  input: "gradients/batch_normalization/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/add_grad/Sum_1"
  input: "gradients/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization/batchnorm/add_grad/Reshape_1"
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^gradients/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/batch_normalization/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Shape"
  op: "Shape"
  input: "batch_normalization/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/add"
  op: "Add"
  input: "batch_normalization/moments/variance/reduction_indices"
  input: "gradients/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization/moments/variance_grad/add"
  input: "gradients/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/range"
  op: "Range"
  input: "gradients/batch_normalization/moments/variance_grad/range/start"
  input: "gradients/batch_normalization/moments/variance_grad/Size"
  input: "gradients/batch_normalization/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization/moments/variance_grad/Shape_1"
  input: "gradients/batch_normalization/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization/moments/variance_grad/range"
  input: "gradients/batch_normalization/moments/variance_grad/mod"
  input: "gradients/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/batch_normalization/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization/moments/variance_grad/DynamicStitch"
  input: "gradients/batch_normalization/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/batch_normalization/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/moments/Squeeze_1_grad/Reshape"
  input: "gradients/batch_normalization/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization/moments/variance_grad/Reshape"
  input: "gradients/batch_normalization/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "batch_normalization/moments/SquaredDifference"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization/moments/variance_grad/Shape_2"
  input: "gradients/batch_normalization/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization/moments/variance_grad/Shape_3"
  input: "gradients/batch_normalization/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization/moments/variance_grad/Prod_1"
  input: "gradients/batch_normalization/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization/moments/variance_grad/Prod"
  input: "gradients/batch_normalization/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization/moments/variance_grad/Tile"
  input: "gradients/batch_normalization/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dense/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Shape"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/scalar"
  input: "gradients/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dense/Relu"
  input: "batch_normalization/moments/StopGradient"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/mul"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Sum"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Shape"
  op: "Shape"
  input: "dense/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Size"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/add"
  op: "Add"
  input: "batch_normalization/moments/mean/reduction_indices"
  input: "gradients/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/batch_normalization/moments/mean_grad/add"
  input: "gradients/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/range/start"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/range/delta"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/range"
  op: "Range"
  input: "gradients/batch_normalization/moments/mean_grad/range/start"
  input: "gradients/batch_normalization/moments/mean_grad/Size"
  input: "gradients/batch_normalization/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/batch_normalization/moments/mean_grad/Shape_1"
  input: "gradients/batch_normalization/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/batch_normalization/moments/mean_grad/range"
  input: "gradients/batch_normalization/moments/mean_grad/mod"
  input: "gradients/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/batch_normalization/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/batch_normalization/moments/mean_grad/DynamicStitch"
  input: "gradients/batch_normalization/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/batch_normalization/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/batch_normalization/moments/Squeeze_grad/Reshape"
  input: "gradients/batch_normalization/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/batch_normalization/moments/mean_grad/Reshape"
  input: "gradients/batch_normalization/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "dense/Relu"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Const"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/batch_normalization/moments/mean_grad/Shape_2"
  input: "gradients/batch_normalization/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Const_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/batch_normalization/moments/mean_grad/Shape_3"
  input: "gradients/batch_normalization/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/batch_normalization/moments/mean_grad/Prod_1"
  input: "gradients/batch_normalization/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/batch_normalization/moments/mean_grad/Prod"
  input: "gradients/batch_normalization/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/batch_normalization/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/batch_normalization/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/batch_normalization/moments/mean_grad/Tile"
  input: "gradients/batch_normalization/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/batch_normalization/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_11"
  input: "dense/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/dense/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense/Relu_grad/ReluGrad"
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/Relu_grad/ReluGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "concat"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/dense/MatMul_grad/MatMul"
  input: "^gradients/dense/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dense/MatMul_grad/MatMul"
  input: "^gradients/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "gradients/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dense/MatMul_grad/MatMul_1"
  input: "^gradients/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Rank"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/concat_grad/mod"
  op: "FloorMod"
  input: "concat/axis"
  input: "gradients/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/Exit_3"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_grad/ShapeN"
  op: "ShapeN"
  input: "rnn/while/Exit_3"
  input: "input_layer/concat"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/concat_grad/mod"
  input: "gradients/concat_grad/ShapeN"
  input: "gradients/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice"
  op: "Slice"
  input: "gradients/dense/MatMul_grad/tuple/control_dependency"
  input: "gradients/concat_grad/ConcatOffset"
  input: "gradients/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/dense/MatMul_grad/tuple/control_dependency"
  input: "gradients/concat_grad/ConcatOffset:1"
  input: "gradients/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/Slice_1"
}
node {
  name: "gradients/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/concat_grad/Slice"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/concat_grad/Slice_1"
  input: "^gradients/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/dense/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/dense/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dense/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  op: "RefEnter"
  input: "batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  op: "RefEnter"
  input: "batch_normalization/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_3/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_1/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  op: "RefEnter"
  input: "batch_normalization_2/AssignMovingAvg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/Switch"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/Switch:1"
  input: "^gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_1"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_2"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_3"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_4"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_5"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_6"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "rnn/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/b_sync"
  op: "ControlTrigger"
  input: "^gradients/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/zeros_like/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/Select_1_grad/Select/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/rnn/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/Select_1_grad/Select/Enter"
  input: "rnn/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/rnn/while/Select_1_grad/zeros_like"
  input: "gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/Select_1_grad/Select"
  input: "^gradients/rnn/while/Select_1_grad/Select_1"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/Select_1_grad/Select"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/Select_1_grad/Select_1"
  input: "^gradients/rnn/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape"
  op: "Shape"
  input: "rnn/while/gru_cell/mul_1"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/gru_cell/mul_2"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_1"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_2"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_3"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_4"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_5"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_6"
  input: "^gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Shape_1/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/gru_cell/add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/add_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/gru_cell/add_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/add_grad/Sum"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/add_grad/Sum_1"
  input: "gradients/rnn/while/gru_cell/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/add_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/add_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/add_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/add_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/gru_cell/split:1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/rnn/while/gru_cell/add_grad/tuple/control_dependency"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Sum"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/rnn/while/gru_cell/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/Enter"
  input: "rnn/while/gru_cell/split:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Mul_1"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Sum_1"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/gru_cell/sub"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/gru_cell/Tanh"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/rnn/while/gru_cell/add_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/Enter"
  input: "rnn/while/gru_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Sum"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/rnn/while/gru_cell/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/Enter"
  input: "rnn/while/gru_cell/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul_1"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Sum_1"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/gru_cell/split:1"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_1"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_2"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_3"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_4"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_5"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_6"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Shape_1/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/gru_cell/sub_grad/Shape"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/sub_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/gru_cell/sub_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/sub_grad/Sum"
  input: "gradients/rnn/while/gru_cell/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Neg"
  op: "Neg"
  input: "gradients/rnn/while/gru_cell/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/sub_grad/Neg"
  input: "gradients/rnn/while/gru_cell/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/sub_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/sub_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/sub_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn/while/gru_cell/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_7"
  input: "^gradients/rnn/while/gru_cell/Tanh_grad/TanhGrad"
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/Tanh_grad/TanhGrad"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/Tanh_grad/TanhGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/BiasAddGrad"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/BiasAdd_1_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/gru_cell/candidate/kernel/read"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/concat_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/Enter"
  input: "rnn/while/gru_cell/concat_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1"
  input: "^gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/Switch:1"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Rank/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/Const"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/TensorArrayReadV3"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Enter"
  input: "rnn/while/TensorArrayReadV3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Enter_1"
  input: "rnn/while/gru_cell/mul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/mod"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Slice"
  op: "Slice"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ConcatOffset"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ConcatOffset:1"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Slice"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/Slice_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/Slice"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/Slice_1"
  input: "^gradients/rnn/while/gru_cell/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/Switch:1"
  input: "gradients/rnn/while/gru_cell/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape"
  op: "Shape"
  input: "rnn/while/gru_cell/split"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Shape_1/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/rnn/while/gru_cell/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/mul_grad/Sum"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/split"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/Enter"
  input: "rnn/while/gru_cell/split"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/rnn/while/gru_cell/mul_grad/Mul_1"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/rnn/while/gru_cell/mul_grad/Sum_1"
  input: "gradients/rnn/while/gru_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/mul_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/mul_grad/Reshape"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/mul_grad/Reshape_1"
  input: "^gradients/rnn/while/gru_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/rnn/while/gru_cell/mul_grad/tuple/control_dependency"
  input: "gradients/AddN_13"
  input: "gradients/rnn/while/gru_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_1"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_2"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_3"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_4"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_5"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_6"
  input: "^gradients/rnn/while/gru_cell/split_grad/concat/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/split_grad/concat/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  input: "gradients/rnn/while/gru_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/Enter"
  input: "rnn/while/gru_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_7"
  input: "^gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad"
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "rnn/gru_cell/gates/kernel/read"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/gru_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/Enter"
  input: "rnn/while/gru_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1"
  input: "^gradients/rnn/while/gru_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/rnn/while/gru_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Rank/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/rnn/while/gru_cell/concat_grad/Const"
  input: "gradients/rnn/while/gru_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/TensorArrayReadV3"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity"
  op: "Identity"
  input: "gradients/Add/Identity/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_1"
  op: "Identity"
  input: "gradients/Add/Identity_1/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_2"
  op: "Identity"
  input: "gradients/Add/Identity_2/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_3"
  op: "Identity"
  input: "gradients/Add/Identity_3/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_4"
  op: "Identity"
  input: "gradients/Add/Identity_4/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_5"
  op: "Identity"
  input: "gradients/Add/Identity_5/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_6"
  op: "Identity"
  input: "gradients/Add/Identity_6/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Shape/Identity_7"
  op: "Identity"
  input: "gradients/Add/Identity_7/RefEnter"
  input: "^rnn/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/ShapeN/StackPopV2"
  input: "gradients/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ShapeN/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/rnn/while/gru_cell/concat_grad/mod"
  input: "gradients/rnn/while/gru_cell/concat_grad/ShapeN"
  input: "gradients/rnn/while/gru_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/concat_grad/ConcatOffset"
  input: "gradients/rnn/while/gru_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/concat_grad/ConcatOffset:1"
  input: "gradients/rnn/while/gru_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/gru_cell/concat_grad/Slice_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_2"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_3"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_4"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_5"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_6"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_7"
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/concat_grad/Slice"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/gru_cell/concat_grad/Slice_1"
  input: "^gradients/rnn/while/gru_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/rnn/while/gru_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/rnn/while/gru_cell/concat_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/concat_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/gru_cell/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_1"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_2"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_3"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_4"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_5"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_6"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_1"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_2"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_3"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_4"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_5"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_6"
  input: "^gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_1"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_2"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_3"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_4"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_4/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_5"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_5/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_6"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_6/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow/Identity_7"
  op: "Identity"
  input: "gradients/rnn/while/Merge_3_grad/tuple/group_deps/Identity_7/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "gradients/AddN_14"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/rnn/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/rnn/while/gru_cell/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/gru_cell/mul_grad/tuple/control_dependency_1"
  input: "gradients/rnn/while/gru_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "rnn/TensorArray_1"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "rnn/TensorArrayUnstack/range"
  input: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
}
node {
  name: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "transpose/perm"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/Reshape_grad/Shape"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/transpose_grad/transpose"
  input: "gradients/sequence_input_layer/col8_embedding/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2_grad/Shape"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/sequence_input_layer/col8_embedding/Reshape_grad/Reshape"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/zeros_like"
  op: "ZerosLike"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/zeros_like"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select"
  op: "Select"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Tile"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2_grad/Reshape"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select_1"
  op: "Select"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/Tile"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/zeros_like"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  input: "^gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select"
  input: "^gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select_1"
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select"
  input: "^gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select_1"
  input: "^gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup/Identity"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/Shape"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  op: "SparseSegmentMeanGrad"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights_grad/tuple/control_dependency_1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Unique:1"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Cast"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  op: "Cast"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Unique"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ToInt32"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse_grad/SparseSegmentMeanGrad"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/Unique"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam/Assign"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam/read"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1/Assign"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1/read"
  op: "Identity"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel/Adam"
  input: "rnn/gru_cell/gates/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  input: "rnn/gru_cell/gates/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias/Adam"
  input: "rnn/gru_cell/gates/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  input: "rnn/gru_cell/gates/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/gates/bias/Adam_1/read"
  op: "Identity"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  input: "rnn/gru_cell/candidate/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam_1/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  input: "rnn/gru_cell/candidate/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/kernel/Adam_1/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias/Adam"
  input: "rnn/gru_cell/candidate/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam_1/Assign"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  input: "rnn/gru_cell/candidate/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/gru_cell/candidate/bias/Adam_1/read"
  op: "Identity"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam/Assign"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam/read"
  op: "Identity"
  input: "dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/Adam_1/read"
  op: "Identity"
  input: "dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam/Assign"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam/read"
  op: "Identity"
  input: "dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/Adam_1/read"
  op: "Identity"
  input: "dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "batch_normalization/gamma/Adam"
  input: "batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization/gamma/Adam_1"
  input: "batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "batch_normalization/beta/Adam"
  input: "batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization/beta/Adam_1"
  input: "batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "dense_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Adam/Assign"
  op: "Assign"
  input: "dense_1/kernel/Adam"
  input: "dense_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/Adam/read"
  op: "Identity"
  input: "dense_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "dense_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense_1/kernel/Adam_1"
  input: "dense_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/Adam_1/read"
  op: "Identity"
  input: "dense_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Adam/Assign"
  op: "Assign"
  input: "dense_1/bias/Adam"
  input: "dense_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/Adam/read"
  op: "Identity"
  input: "dense_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense_1/bias/Adam_1"
  input: "dense_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/Adam_1/read"
  op: "Identity"
  input: "dense_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam"
  input: "batch_normalization_1/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam/read"
  op: "Identity"
  input: "batch_normalization_1/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_1/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam"
  input: "batch_normalization_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam/read"
  op: "Identity"
  input: "batch_normalization_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam_1"
  input: "batch_normalization_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Adam/Assign"
  op: "Assign"
  input: "dense_2/kernel/Adam"
  input: "dense_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/Adam/read"
  op: "Identity"
  input: "dense_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense_2/kernel/Adam_1"
  input: "dense_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/Adam_1/read"
  op: "Identity"
  input: "dense_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Adam/Assign"
  op: "Assign"
  input: "dense_2/bias/Adam"
  input: "dense_2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/Adam/read"
  op: "Identity"
  input: "dense_2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense_2/bias/Adam_1"
  input: "dense_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/Adam_1/read"
  op: "Identity"
  input: "dense_2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_2/gamma/Adam"
  input: "batch_normalization_2/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam/read"
  op: "Identity"
  input: "batch_normalization_2/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_2/gamma/Adam_1"
  input: "batch_normalization_2/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/gamma/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_2/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_2/beta/Adam"
  input: "batch_normalization_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam/read"
  op: "Identity"
  input: "batch_normalization_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_2/beta/Adam_1"
  input: "batch_normalization_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_2/beta/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/kernel/Adam/Assign"
  op: "Assign"
  input: "dense_3/kernel/Adam"
  input: "dense_3/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/kernel/Adam/read"
  op: "Identity"
  input: "dense_3/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/kernel/Adam_1/Assign"
  op: "Assign"
  input: "dense_3/kernel/Adam_1"
  input: "dense_3/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/kernel/Adam_1/read"
  op: "Identity"
  input: "dense_3/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/bias/Adam/Assign"
  op: "Assign"
  input: "dense_3/bias/Adam"
  input: "dense_3/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/bias/Adam/read"
  op: "Identity"
  input: "dense_3/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/bias/Adam_1/Assign"
  op: "Assign"
  input: "dense_3/bias/Adam_1"
  input: "dense_3/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/bias/Adam_1/read"
  op: "Identity"
  input: "dense_3/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_3/gamma/Adam"
  input: "batch_normalization_3/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam/read"
  op: "Identity"
  input: "batch_normalization_3/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_3/gamma/Adam_1"
  input: "batch_normalization_3/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/gamma/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_3/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam/Assign"
  op: "Assign"
  input: "batch_normalization_3/beta/Adam"
  input: "batch_normalization_3/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam/read"
  op: "Identity"
  input: "batch_normalization_3/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam_1/Assign"
  op: "Assign"
  input: "batch_normalization_3/beta/Adam_1"
  input: "batch_normalization_3/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_3/beta/Adam_1/read"
  op: "Identity"
  input: "batch_normalization_3/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Unique"
  op: "Unique"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Shape"
  op: "Shape"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice/stack"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice/stack_1"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice/stack_2"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice"
  op: "StridedSlice"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Shape"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice/stack"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice/stack_1"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "gradients/sequence_input_layer/col8_embedding/col8_embedding_weights/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Unique:1"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub/x"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub"
  op: "Sub"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub/x"
  input: "beta2_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Sqrt"
  op: "Sqrt"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul"
  op: "Mul"
  input: "Adam/learning_rate"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_1/x"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_1"
  op: "Sub"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_1/x"
  input: "beta1_power/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/truediv"
  op: "RealDiv"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_2/x"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_2"
  op: "Sub"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_2/x"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_1"
  op: "Mul"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/UnsortedSegmentSum"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_2"
  op: "Mul"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam/read"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Assign"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/ScatterAdd"
  op: "ScatterAdd"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Unique"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_1"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Assign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_3"
  op: "Mul"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/UnsortedSegmentSum"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_3/x"
  op: "Const"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_3"
  op: "Sub"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_3/x"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_4"
  op: "Mul"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_3"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_5"
  op: "Mul"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1/read"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Assign_1"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/ScatterAdd_1"
  op: "ScatterAdd"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Unique"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_4"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Assign_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Sqrt_1"
  op: "Sqrt"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/ScatterAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_6"
  op: "Mul"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/truediv"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/ScatterAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/add"
  op: "Add"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/Sqrt_1"
  input: "Adam/epsilon"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/truediv_1"
  op: "RealDiv"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/mul_6"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/AssignSub"
  op: "AssignSub"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  input: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_sequence_input_layer/col8_embedding/embedding_weights/group_deps"
  op: "NoOp"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/AssignSub"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/ScatterAdd"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/ScatterAdd_1"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
}
node {
  name: "Adam/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/gates/kernel"
  input: "rnn/gru_cell/gates/kernel/Adam"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/gru_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/gru_cell/gates/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/gates/bias"
  input: "rnn/gru_cell/gates/bias/Adam"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/gru_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/candidate/kernel"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/gru_cell/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "rnn/gru_cell/candidate/bias"
  input: "rnn/gru_cell/candidate/bias/Adam"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/rnn/while/gru_cell/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Adam"
  input: "batch_normalization/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Adam"
  input: "batch_normalization/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Adam"
  input: "dense_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_1/bias"
  input: "dense_1/bias/Adam"
  input: "dense_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_1/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Adam"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_1/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Adam"
  input: "batch_normalization_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_1/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_2/kernel"
  input: "dense_2/kernel/Adam"
  input: "dense_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_2/bias"
  input: "dense_2/bias/Adam"
  input: "dense_2/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_2/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Adam"
  input: "batch_normalization_2/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_2/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Adam"
  input: "batch_normalization_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_2/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_3/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_3/kernel"
  input: "dense_3/kernel/Adam"
  input: "dense_3/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_dense_3/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "dense_3/bias"
  input: "dense_3/bias/Adam"
  input: "dense_3/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/dense_3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_3/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Adam"
  input: "batch_normalization_3/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_3/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_batch_normalization_3/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Adam"
  input: "batch_normalization_3/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/batch_normalization_3/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_2/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_2/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_3/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_3/gamma/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_dense_1/bias/ApplyAdam"
  input: "^Adam/update_dense_1/kernel/ApplyAdam"
  input: "^Adam/update_dense_2/bias/ApplyAdam"
  input: "^Adam/update_dense_2/kernel/ApplyAdam"
  input: "^Adam/update_dense_3/bias/ApplyAdam"
  input: "^Adam/update_dense_3/kernel/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/gates/bias/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_2/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_2/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_3/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_3/gamma/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_dense_1/bias/ApplyAdam"
  input: "^Adam/update_dense_1/kernel/ApplyAdam"
  input: "^Adam/update_dense_2/bias/ApplyAdam"
  input: "^Adam/update_dense_2/kernel/ApplyAdam"
  input: "^Adam/update_dense_3/bias/ApplyAdam"
  input: "^Adam/update_dense_3/kernel/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/gates/bias/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_1/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_2/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_2/gamma/ApplyAdam"
  input: "^Adam/update_batch_normalization_3/beta/ApplyAdam"
  input: "^Adam/update_batch_normalization_3/gamma/ApplyAdam"
  input: "^Adam/update_dense/bias/ApplyAdam"
  input: "^Adam/update_dense/kernel/ApplyAdam"
  input: "^Adam/update_dense_1/bias/ApplyAdam"
  input: "^Adam/update_dense_1/kernel/ApplyAdam"
  input: "^Adam/update_dense_2/bias/ApplyAdam"
  input: "^Adam/update_dense_2/kernel/ApplyAdam"
  input: "^Adam/update_dense_3/bias/ApplyAdam"
  input: "^Adam/update_dense_3/kernel/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/candidate/bias/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/candidate/kernel/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/gates/bias/ApplyAdam"
  input: "^Adam/update_rnn/gru_cell/gates/kernel/ApplyAdam"
  input: "^Adam/update_sequence_input_layer/col8_embedding/embedding_weights/group_deps"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  input: "^batch_normalization/AssignMovingAvg"
  input: "^batch_normalization/AssignMovingAvg_1"
  input: "^batch_normalization_1/AssignMovingAvg"
  input: "^batch_normalization_1/AssignMovingAvg_1"
  input: "^batch_normalization_2/AssignMovingAvg"
  input: "^batch_normalization_2/AssignMovingAvg_1"
  input: "^batch_normalization_3/AssignMovingAvg"
  input: "^batch_normalization_3/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^batch_normalization/beta/Adam/Assign"
  input: "^batch_normalization/beta/Adam_1/Assign"
  input: "^batch_normalization/beta/Assign"
  input: "^batch_normalization/gamma/Adam/Assign"
  input: "^batch_normalization/gamma/Adam_1/Assign"
  input: "^batch_normalization/gamma/Assign"
  input: "^batch_normalization/moving_mean/Assign"
  input: "^batch_normalization/moving_variance/Assign"
  input: "^batch_normalization_1/beta/Adam/Assign"
  input: "^batch_normalization_1/beta/Adam_1/Assign"
  input: "^batch_normalization_1/beta/Assign"
  input: "^batch_normalization_1/gamma/Adam/Assign"
  input: "^batch_normalization_1/gamma/Adam_1/Assign"
  input: "^batch_normalization_1/gamma/Assign"
  input: "^batch_normalization_1/moving_mean/Assign"
  input: "^batch_normalization_1/moving_variance/Assign"
  input: "^batch_normalization_2/beta/Adam/Assign"
  input: "^batch_normalization_2/beta/Adam_1/Assign"
  input: "^batch_normalization_2/beta/Assign"
  input: "^batch_normalization_2/gamma/Adam/Assign"
  input: "^batch_normalization_2/gamma/Adam_1/Assign"
  input: "^batch_normalization_2/gamma/Assign"
  input: "^batch_normalization_2/moving_mean/Assign"
  input: "^batch_normalization_2/moving_variance/Assign"
  input: "^batch_normalization_3/beta/Adam/Assign"
  input: "^batch_normalization_3/beta/Adam_1/Assign"
  input: "^batch_normalization_3/beta/Assign"
  input: "^batch_normalization_3/gamma/Adam/Assign"
  input: "^batch_normalization_3/gamma/Adam_1/Assign"
  input: "^batch_normalization_3/gamma/Assign"
  input: "^batch_normalization_3/moving_mean/Assign"
  input: "^batch_normalization_3/moving_variance/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^col7_local_vec/Assign"
  input: "^dense/bias/Adam/Assign"
  input: "^dense/bias/Adam_1/Assign"
  input: "^dense/bias/Assign"
  input: "^dense/kernel/Adam/Assign"
  input: "^dense/kernel/Adam_1/Assign"
  input: "^dense/kernel/Assign"
  input: "^dense_1/bias/Adam/Assign"
  input: "^dense_1/bias/Adam_1/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Adam/Assign"
  input: "^dense_1/kernel/Adam_1/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_2/bias/Adam/Assign"
  input: "^dense_2/bias/Adam_1/Assign"
  input: "^dense_2/bias/Assign"
  input: "^dense_2/kernel/Adam/Assign"
  input: "^dense_2/kernel/Adam_1/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_3/bias/Adam/Assign"
  input: "^dense_3/bias/Adam_1/Assign"
  input: "^dense_3/bias/Assign"
  input: "^dense_3/kernel/Adam/Assign"
  input: "^dense_3/kernel/Adam_1/Assign"
  input: "^dense_3/kernel/Assign"
  input: "^global_step/Assign"
  input: "^input_layer_6/col4_embedding/embedding_weights/Assign"
  input: "^input_layer_7/col7_extend_1_embedding/embedding_weights/Assign"
  input: "^input_layer_8/col7_extend_2_embedding/embedding_weights/Assign"
  input: "^rnn/gru_cell/candidate/bias/Adam/Assign"
  input: "^rnn/gru_cell/candidate/bias/Adam_1/Assign"
  input: "^rnn/gru_cell/candidate/bias/Assign"
  input: "^rnn/gru_cell/candidate/kernel/Adam/Assign"
  input: "^rnn/gru_cell/candidate/kernel/Adam_1/Assign"
  input: "^rnn/gru_cell/candidate/kernel/Assign"
  input: "^rnn/gru_cell/gates/bias/Adam/Assign"
  input: "^rnn/gru_cell/gates/bias/Adam_1/Assign"
  input: "^rnn/gru_cell/gates/bias/Assign"
  input: "^rnn/gru_cell/gates/kernel/Adam/Assign"
  input: "^rnn/gru_cell/gates/kernel/Adam_1/Assign"
  input: "^rnn/gru_cell/gates/kernel/Assign"
  input: "^sequence_input_layer/col8_embedding/embedding_weights/Adam/Assign"
  input: "^sequence_input_layer/col8_embedding/embedding_weights/Adam_1/Assign"
  input: "^sequence_input_layer/col8_embedding/embedding_weights/Assign"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/embedding_weights/Assign"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/embedding_weights/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "input_layer_6/col4_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "col7_local_vec"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dense_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dense_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "dense_2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "dense_2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "dense_2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "dense_2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "dense_3/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "dense_3/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "dense_3/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "dense_3/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "auc/true_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "auc/false_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "auc/true_negatives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/true_negatives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "auc/false_positives"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@auc/false_positives"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  input: "report_uninitialized_variables/IsVariableInitialized_69"
  input: "report_uninitialized_variables/IsVariableInitialized_70"
  input: "report_uninitialized_variables/IsVariableInitialized_71"
  input: "report_uninitialized_variables/IsVariableInitialized_72"
  input: "report_uninitialized_variables/IsVariableInitialized_73"
  input: "report_uninitialized_variables/IsVariableInitialized_74"
  input: "report_uninitialized_variables/IsVariableInitialized_75"
  input: "report_uninitialized_variables/IsVariableInitialized_76"
  input: "report_uninitialized_variables/IsVariableInitialized_77"
  input: "report_uninitialized_variables/IsVariableInitialized_78"
  input: "report_uninitialized_variables/IsVariableInitialized_79"
  input: "report_uninitialized_variables/IsVariableInitialized_80"
  input: "report_uninitialized_variables/IsVariableInitialized_81"
  input: "report_uninitialized_variables/IsVariableInitialized_82"
  input: "report_uninitialized_variables/IsVariableInitialized_83"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 84
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 84
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 84
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 84
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 84
          }
        }
        string_val: "global_step"
        string_val: "input_layer_6/col4_embedding/embedding_weights"
        string_val: "input_layer_7/col7_extend_1_embedding/embedding_weights"
        string_val: "input_layer_8/col7_extend_2_embedding/embedding_weights"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights"
        string_val: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
        string_val: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
        string_val: "col7_local_vec"
        string_val: "rnn/gru_cell/gates/kernel"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "dense_2/kernel"
        string_val: "dense_2/bias"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "dense_3/kernel"
        string_val: "dense_3/bias"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
        string_val: "rnn/gru_cell/gates/kernel/Adam"
        string_val: "rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "rnn/gru_cell/gates/bias/Adam"
        string_val: "rnn/gru_cell/gates/bias/Adam_1"
        string_val: "rnn/gru_cell/candidate/kernel/Adam"
        string_val: "rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "rnn/gru_cell/candidate/bias/Adam"
        string_val: "rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "batch_normalization/gamma/Adam"
        string_val: "batch_normalization/gamma/Adam_1"
        string_val: "batch_normalization/beta/Adam"
        string_val: "batch_normalization/beta/Adam_1"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
        string_val: "batch_normalization_1/gamma/Adam"
        string_val: "batch_normalization_1/gamma/Adam_1"
        string_val: "batch_normalization_1/beta/Adam"
        string_val: "batch_normalization_1/beta/Adam_1"
        string_val: "dense_2/kernel/Adam"
        string_val: "dense_2/kernel/Adam_1"
        string_val: "dense_2/bias/Adam"
        string_val: "dense_2/bias/Adam_1"
        string_val: "batch_normalization_2/gamma/Adam"
        string_val: "batch_normalization_2/gamma/Adam_1"
        string_val: "batch_normalization_2/beta/Adam"
        string_val: "batch_normalization_2/beta/Adam_1"
        string_val: "dense_3/kernel/Adam"
        string_val: "dense_3/kernel/Adam_1"
        string_val: "dense_3/bias/Adam"
        string_val: "dense_3/bias/Adam_1"
        string_val: "batch_normalization_3/gamma/Adam"
        string_val: "batch_normalization_3/gamma/Adam_1"
        string_val: "batch_normalization_3/beta/Adam"
        string_val: "batch_normalization_3/beta/Adam_1"
        string_val: "auc/true_positives"
        string_val: "auc/false_negatives"
        string_val: "auc/true_negatives"
        string_val: "auc/false_positives"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 84
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 84
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 84
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 84
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 84
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "input_layer_6/col4_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "col7_local_vec"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "dense_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "dense_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "dense_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "dense_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "batch_normalization_1/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "dense_2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "dense_2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "dense_2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "dense_2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "batch_normalization_2/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "dense_3/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "dense_3/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "dense_3/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "dense_3/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "batch_normalization_3/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  input: "report_uninitialized_variables_1/IsVariableInitialized_51"
  input: "report_uninitialized_variables_1/IsVariableInitialized_52"
  input: "report_uninitialized_variables_1/IsVariableInitialized_53"
  input: "report_uninitialized_variables_1/IsVariableInitialized_54"
  input: "report_uninitialized_variables_1/IsVariableInitialized_55"
  input: "report_uninitialized_variables_1/IsVariableInitialized_56"
  input: "report_uninitialized_variables_1/IsVariableInitialized_57"
  input: "report_uninitialized_variables_1/IsVariableInitialized_58"
  input: "report_uninitialized_variables_1/IsVariableInitialized_59"
  input: "report_uninitialized_variables_1/IsVariableInitialized_60"
  input: "report_uninitialized_variables_1/IsVariableInitialized_61"
  input: "report_uninitialized_variables_1/IsVariableInitialized_62"
  input: "report_uninitialized_variables_1/IsVariableInitialized_63"
  input: "report_uninitialized_variables_1/IsVariableInitialized_64"
  input: "report_uninitialized_variables_1/IsVariableInitialized_65"
  input: "report_uninitialized_variables_1/IsVariableInitialized_66"
  input: "report_uninitialized_variables_1/IsVariableInitialized_67"
  input: "report_uninitialized_variables_1/IsVariableInitialized_68"
  input: "report_uninitialized_variables_1/IsVariableInitialized_69"
  input: "report_uninitialized_variables_1/IsVariableInitialized_70"
  input: "report_uninitialized_variables_1/IsVariableInitialized_71"
  input: "report_uninitialized_variables_1/IsVariableInitialized_72"
  input: "report_uninitialized_variables_1/IsVariableInitialized_73"
  input: "report_uninitialized_variables_1/IsVariableInitialized_74"
  input: "report_uninitialized_variables_1/IsVariableInitialized_75"
  input: "report_uninitialized_variables_1/IsVariableInitialized_76"
  input: "report_uninitialized_variables_1/IsVariableInitialized_77"
  input: "report_uninitialized_variables_1/IsVariableInitialized_78"
  input: "report_uninitialized_variables_1/IsVariableInitialized_79"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 80
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: "global_step"
        string_val: "input_layer_6/col4_embedding/embedding_weights"
        string_val: "input_layer_7/col7_extend_1_embedding/embedding_weights"
        string_val: "input_layer_8/col7_extend_2_embedding/embedding_weights"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights"
        string_val: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
        string_val: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
        string_val: "col7_local_vec"
        string_val: "rnn/gru_cell/gates/kernel"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "dense_2/kernel"
        string_val: "dense_2/bias"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "dense_3/kernel"
        string_val: "dense_3/bias"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
        string_val: "rnn/gru_cell/gates/kernel/Adam"
        string_val: "rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "rnn/gru_cell/gates/bias/Adam"
        string_val: "rnn/gru_cell/gates/bias/Adam_1"
        string_val: "rnn/gru_cell/candidate/kernel/Adam"
        string_val: "rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "rnn/gru_cell/candidate/bias/Adam"
        string_val: "rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "batch_normalization/gamma/Adam"
        string_val: "batch_normalization/gamma/Adam_1"
        string_val: "batch_normalization/beta/Adam"
        string_val: "batch_normalization/beta/Adam_1"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
        string_val: "batch_normalization_1/gamma/Adam"
        string_val: "batch_normalization_1/gamma/Adam_1"
        string_val: "batch_normalization_1/beta/Adam"
        string_val: "batch_normalization_1/beta/Adam_1"
        string_val: "dense_2/kernel/Adam"
        string_val: "dense_2/kernel/Adam_1"
        string_val: "dense_2/bias/Adam"
        string_val: "dense_2/bias/Adam_1"
        string_val: "batch_normalization_2/gamma/Adam"
        string_val: "batch_normalization_2/gamma/Adam_1"
        string_val: "batch_normalization_2/beta/Adam"
        string_val: "batch_normalization_2/beta/Adam_1"
        string_val: "dense_3/kernel/Adam"
        string_val: "dense_3/kernel/Adam_1"
        string_val: "dense_3/bias/Adam"
        string_val: "dense_3/bias/Adam_1"
        string_val: "batch_normalization_3/gamma/Adam"
        string_val: "batch_normalization_3/gamma/Adam_1"
        string_val: "batch_normalization_3/beta/Adam"
        string_val: "batch_normalization_3/beta/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^auc/false_negatives/Assign"
  input: "^auc/false_positives/Assign"
  input: "^auc/true_negatives/Assign"
  input: "^auc/true_positives/Assign"
}
node {
  name: "init_all_tables/NoOp"
  op: "NoOp"
  input: "^input_layer_6/col4_embedding/col4_lookup/hash_table/table_init"
  input: "^input_layer_7/col7_extend_1_embedding/col7_extend_1_lookup/hash_table/table_init"
  input: "^input_layer_8/col7_extend_2_embedding/col7_extend_2_lookup/hash_table/table_init"
  input: "^key_value_init_4"
  input: "^sequence_input_layer/col8_embedding/col8_lookup/hash_table/table_init"
  input: "^sequence_input_layer_1/col6_extend_1_embedding/col6_extend_1_lookup/hash_table/table_init"
  input: "^sequence_input_layer_2/col6_extend_2_embedding/col6_extend_2_lookup/hash_table/table_init"
  input: "^sequence_input_layer_3/col6_indicator/col6_lookup/hash_table/table_init"
}
node {
  name: "init_all_tables/NoOp_1"
  op: "NoOp"
  input: "^key_value_init"
  input: "^key_value_init_1"
  input: "^key_value_init_2"
  input: "^key_value_init_3"
  device: "/device:CPU:0"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^init_all_tables/NoOp"
  input: "^init_all_tables/NoOp_1"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_68e31ec48c4946df988c3843cfb58b83/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/beta/Adam"
        string_val: "batch_normalization/beta/Adam_1"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/gamma/Adam"
        string_val: "batch_normalization/gamma/Adam_1"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/beta/Adam"
        string_val: "batch_normalization_1/beta/Adam_1"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/gamma/Adam"
        string_val: "batch_normalization_1/gamma/Adam_1"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/beta/Adam"
        string_val: "batch_normalization_2/beta/Adam_1"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/gamma/Adam"
        string_val: "batch_normalization_2/gamma/Adam_1"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/beta/Adam"
        string_val: "batch_normalization_3/beta/Adam_1"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/gamma/Adam"
        string_val: "batch_normalization_3/gamma/Adam_1"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "col7_local_vec"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense_1/bias"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
        string_val: "dense_1/kernel"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "dense_2/bias"
        string_val: "dense_2/bias/Adam"
        string_val: "dense_2/bias/Adam_1"
        string_val: "dense_2/kernel"
        string_val: "dense_2/kernel/Adam"
        string_val: "dense_2/kernel/Adam_1"
        string_val: "dense_3/bias"
        string_val: "dense_3/bias/Adam"
        string_val: "dense_3/bias/Adam_1"
        string_val: "dense_3/kernel"
        string_val: "dense_3/kernel/Adam"
        string_val: "dense_3/kernel/Adam_1"
        string_val: "global_step"
        string_val: "input_layer_6/col4_embedding/embedding_weights"
        string_val: "input_layer_7/col7_extend_1_embedding/embedding_weights"
        string_val: "input_layer_8/col7_extend_2_embedding/embedding_weights"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "rnn/gru_cell/candidate/bias/Adam"
        string_val: "rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/candidate/kernel/Adam"
        string_val: "rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/gates/bias/Adam"
        string_val: "rnn/gru_cell/gates/bias/Adam_1"
        string_val: "rnn/gru_cell/gates/kernel"
        string_val: "rnn/gru_cell/gates/kernel/Adam"
        string_val: "rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
        string_val: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
        string_val: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Adam"
  input: "batch_normalization/beta/Adam_1"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Adam"
  input: "batch_normalization/gamma/Adam_1"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Adam"
  input: "batch_normalization_1/beta/Adam_1"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Adam"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_2/beta"
  input: "batch_normalization_2/beta/Adam"
  input: "batch_normalization_2/beta/Adam_1"
  input: "batch_normalization_2/gamma"
  input: "batch_normalization_2/gamma/Adam"
  input: "batch_normalization_2/gamma/Adam_1"
  input: "batch_normalization_2/moving_mean"
  input: "batch_normalization_2/moving_variance"
  input: "batch_normalization_3/beta"
  input: "batch_normalization_3/beta/Adam"
  input: "batch_normalization_3/beta/Adam_1"
  input: "batch_normalization_3/gamma"
  input: "batch_normalization_3/gamma/Adam"
  input: "batch_normalization_3/gamma/Adam_1"
  input: "batch_normalization_3/moving_mean"
  input: "batch_normalization_3/moving_variance"
  input: "beta1_power"
  input: "beta2_power"
  input: "col7_local_vec"
  input: "dense/bias"
  input: "dense/bias/Adam"
  input: "dense/bias/Adam_1"
  input: "dense/kernel"
  input: "dense/kernel/Adam"
  input: "dense/kernel/Adam_1"
  input: "dense_1/bias"
  input: "dense_1/bias/Adam"
  input: "dense_1/bias/Adam_1"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Adam"
  input: "dense_1/kernel/Adam_1"
  input: "dense_2/bias"
  input: "dense_2/bias/Adam"
  input: "dense_2/bias/Adam_1"
  input: "dense_2/kernel"
  input: "dense_2/kernel/Adam"
  input: "dense_2/kernel/Adam_1"
  input: "dense_3/bias"
  input: "dense_3/bias/Adam"
  input: "dense_3/bias/Adam_1"
  input: "dense_3/kernel"
  input: "dense_3/kernel/Adam"
  input: "dense_3/kernel/Adam_1"
  input: "global_step"
  input: "input_layer_6/col4_embedding/embedding_weights"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  input: "rnn/gru_cell/candidate/bias"
  input: "rnn/gru_cell/candidate/bias/Adam"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  input: "rnn/gru_cell/candidate/kernel"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  input: "rnn/gru_cell/gates/bias"
  input: "rnn/gru_cell/gates/bias/Adam"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  input: "rnn/gru_cell/gates/kernel"
  input: "rnn/gru_cell/gates/kernel/Adam"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: "batch_normalization/beta"
        string_val: "batch_normalization/beta/Adam"
        string_val: "batch_normalization/beta/Adam_1"
        string_val: "batch_normalization/gamma"
        string_val: "batch_normalization/gamma/Adam"
        string_val: "batch_normalization/gamma/Adam_1"
        string_val: "batch_normalization/moving_mean"
        string_val: "batch_normalization/moving_variance"
        string_val: "batch_normalization_1/beta"
        string_val: "batch_normalization_1/beta/Adam"
        string_val: "batch_normalization_1/beta/Adam_1"
        string_val: "batch_normalization_1/gamma"
        string_val: "batch_normalization_1/gamma/Adam"
        string_val: "batch_normalization_1/gamma/Adam_1"
        string_val: "batch_normalization_1/moving_mean"
        string_val: "batch_normalization_1/moving_variance"
        string_val: "batch_normalization_2/beta"
        string_val: "batch_normalization_2/beta/Adam"
        string_val: "batch_normalization_2/beta/Adam_1"
        string_val: "batch_normalization_2/gamma"
        string_val: "batch_normalization_2/gamma/Adam"
        string_val: "batch_normalization_2/gamma/Adam_1"
        string_val: "batch_normalization_2/moving_mean"
        string_val: "batch_normalization_2/moving_variance"
        string_val: "batch_normalization_3/beta"
        string_val: "batch_normalization_3/beta/Adam"
        string_val: "batch_normalization_3/beta/Adam_1"
        string_val: "batch_normalization_3/gamma"
        string_val: "batch_normalization_3/gamma/Adam"
        string_val: "batch_normalization_3/gamma/Adam_1"
        string_val: "batch_normalization_3/moving_mean"
        string_val: "batch_normalization_3/moving_variance"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "col7_local_vec"
        string_val: "dense/bias"
        string_val: "dense/bias/Adam"
        string_val: "dense/bias/Adam_1"
        string_val: "dense/kernel"
        string_val: "dense/kernel/Adam"
        string_val: "dense/kernel/Adam_1"
        string_val: "dense_1/bias"
        string_val: "dense_1/bias/Adam"
        string_val: "dense_1/bias/Adam_1"
        string_val: "dense_1/kernel"
        string_val: "dense_1/kernel/Adam"
        string_val: "dense_1/kernel/Adam_1"
        string_val: "dense_2/bias"
        string_val: "dense_2/bias/Adam"
        string_val: "dense_2/bias/Adam_1"
        string_val: "dense_2/kernel"
        string_val: "dense_2/kernel/Adam"
        string_val: "dense_2/kernel/Adam_1"
        string_val: "dense_3/bias"
        string_val: "dense_3/bias/Adam"
        string_val: "dense_3/bias/Adam_1"
        string_val: "dense_3/kernel"
        string_val: "dense_3/kernel/Adam"
        string_val: "dense_3/kernel/Adam_1"
        string_val: "global_step"
        string_val: "input_layer_6/col4_embedding/embedding_weights"
        string_val: "input_layer_7/col7_extend_1_embedding/embedding_weights"
        string_val: "input_layer_8/col7_extend_2_embedding/embedding_weights"
        string_val: "rnn/gru_cell/candidate/bias"
        string_val: "rnn/gru_cell/candidate/bias/Adam"
        string_val: "rnn/gru_cell/candidate/bias/Adam_1"
        string_val: "rnn/gru_cell/candidate/kernel"
        string_val: "rnn/gru_cell/candidate/kernel/Adam"
        string_val: "rnn/gru_cell/candidate/kernel/Adam_1"
        string_val: "rnn/gru_cell/gates/bias"
        string_val: "rnn/gru_cell/gates/bias/Adam"
        string_val: "rnn/gru_cell/gates/bias/Adam_1"
        string_val: "rnn/gru_cell/gates/kernel"
        string_val: "rnn/gru_cell/gates/kernel/Adam"
        string_val: "rnn/gru_cell/gates/kernel/Adam_1"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
        string_val: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
        string_val: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
        string_val: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 80
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 80
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "batch_normalization/beta/Adam"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "batch_normalization/gamma/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "batch_normalization_1/beta/Adam_1"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "batch_normalization_1/gamma/Adam_1"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "batch_normalization_2/beta"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "batch_normalization_2/beta/Adam"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "batch_normalization_2/beta/Adam_1"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "batch_normalization_2/gamma"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "batch_normalization_2/gamma/Adam"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "batch_normalization_2/gamma/Adam_1"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "batch_normalization_2/moving_mean"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "batch_normalization_2/moving_variance"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "batch_normalization_3/beta"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "batch_normalization_3/beta/Adam"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "batch_normalization_3/beta/Adam_1"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "batch_normalization_3/gamma"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "batch_normalization_3/gamma/Adam"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "batch_normalization_3/gamma/Adam_1"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "batch_normalization_3/moving_mean"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "batch_normalization_3/moving_variance"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "col7_local_vec"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@col7_local_vec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "dense/bias"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "dense/bias/Adam"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "dense/bias/Adam_1"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "dense/kernel"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "dense/kernel/Adam"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "dense/kernel/Adam_1"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "dense_1/bias"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "dense_1/bias/Adam"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "dense_1/bias/Adam_1"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "dense_1/kernel"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "dense_1/kernel/Adam"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "dense_1/kernel/Adam_1"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "dense_2/bias"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "dense_2/bias/Adam"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "dense_2/bias/Adam_1"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "dense_2/kernel"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "dense_2/kernel/Adam"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "dense_2/kernel/Adam_1"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "dense_3/bias"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "dense_3/bias/Adam"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "dense_3/bias/Adam_1"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "dense_3/kernel"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "dense_3/kernel/Adam"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "dense_3/kernel/Adam_1"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "input_layer_6/col4_embedding/embedding_weights"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_6/col4_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "input_layer_7/col7_extend_1_embedding/embedding_weights"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_7/col7_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "input_layer_8/col7_extend_2_embedding/embedding_weights"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@input_layer_8/col7_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias/Adam"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "rnn/gru_cell/candidate/bias/Adam_1"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel/Adam"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "rnn/gru_cell/candidate/kernel/Adam_1"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/candidate/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias/Adam"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "rnn/gru_cell/gates/bias/Adam_1"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel/Adam"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "rnn/gru_cell/gates/kernel/Adam_1"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/gru_cell/gates/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "sequence_input_layer/col8_embedding/embedding_weights/Adam_1"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer/col8_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_1/col6_extend_1_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sequence_input_layer_2/col6_extend_2_embedding/embedding_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "tf_data_structured_function_wrapper_ScwLGXY6GeM"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "decodecsv"
        type: DT_FLOAT
      }
      output_arg {
        name: "decodecsv_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "decodecsv_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "decodecsv_2"
        type: DT_STRING
      }
      output_arg {
        name: "decodecsv_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "decodecsv_4"
        type: DT_STRING
      }
      output_arg {
        name: "decodecsv_5"
        type: DT_STRING
      }
      output_arg {
        name: "decodecsv_6"
        type: DT_STRING
      }
      output_arg {
        name: "decodecsv_7"
        type: DT_FLOAT
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
    }
    node_def {
      name: "DecodeCSV/record_defaults_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_6"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_7"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_8"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV"
      op: "DecodeCSV"
      input: "arg0"
      input: "DecodeCSV/record_defaults_0:output:0"
      input: "DecodeCSV/record_defaults_1:output:0"
      input: "DecodeCSV/record_defaults_2:output:0"
      input: "DecodeCSV/record_defaults_3:output:0"
      input: "DecodeCSV/record_defaults_4:output:0"
      input: "DecodeCSV/record_defaults_5:output:0"
      input: "DecodeCSV/record_defaults_6:output:0"
      input: "DecodeCSV/record_defaults_7:output:0"
      input: "DecodeCSV/record_defaults_8:output:0"
      device: "/device:CPU:0"
      attr {
        key: "OUT_TYPE"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "field_delim"
        value {
          s: ","
        }
      }
      attr {
        key: "na_value"
        value {
          s: ""
        }
      }
      attr {
        key: "select_cols"
        value {
          list {
          }
        }
      }
      attr {
        key: "use_quote_delim"
        value {
          b: true
        }
      }
    }
    ret {
      key: "decodecsv"
      value: "DecodeCSV:output:0"
    }
    ret {
      key: "decodecsv_0"
      value: "DecodeCSV:output:1"
    }
    ret {
      key: "decodecsv_1"
      value: "DecodeCSV:output:2"
    }
    ret {
      key: "decodecsv_2"
      value: "DecodeCSV:output:3"
    }
    ret {
      key: "decodecsv_3"
      value: "DecodeCSV:output:4"
    }
    ret {
      key: "decodecsv_4"
      value: "DecodeCSV:output:5"
    }
    ret {
      key: "decodecsv_5"
      value: "DecodeCSV:output:6"
    }
    ret {
      key: "decodecsv_6"
      value: "DecodeCSV:output:7"
    }
    ret {
      key: "decodecsv_7"
      value: "DecodeCSV:output:8"
    }
  }
  function {
    signature {
      name: "_make_dataset_768vPbACYRY"
      output_arg {
        name: "prefetchdataset"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TextLineDataset/filenames"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "../data/train/train_data"
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset/compression_type"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset"
      op: "TextLineDataset"
      input: "TextLineDataset/filenames:output:0"
      input: "TextLineDataset/compression_type:output:0"
      input: "TextLineDataset/buffer_size:output:0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "MapAndBatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 4
          }
        }
      }
    }
    node_def {
      name: "MapAndBatchDatasetV2/num_parallel_calls"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 4
          }
        }
      }
    }
    node_def {
      name: "MapAndBatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "MapAndBatchDatasetV2"
      op: "MapAndBatchDatasetV2"
      input: "TextLineDataset:handle:0"
      input: "MapAndBatchDatasetV2/batch_size:output:0"
      input: "MapAndBatchDatasetV2/num_parallel_calls:output:0"
      input: "MapAndBatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_data_structured_function_wrapper_ScwLGXY6GeM"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 12
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "MapAndBatchDatasetV2:handle:0"
      input: "ShuffleDataset/buffer_size_1:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "ShuffleDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "PrefetchDataset/buffer_size_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "PrefetchDataset"
      op: "PrefetchDataset"
      input: "RepeatDataset:handle:0"
      input: "PrefetchDataset/buffer_size_2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
            type: DT_FLOAT
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "prefetchdataset"
      value: "PrefetchDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
